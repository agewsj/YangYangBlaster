// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rpc_service.proto

#include "rpc_service.pb.h"
#include "rpc_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace yyb {

static const char* RpcService_method_names[] = {
  "/yyb.RpcService/RpcServiceExample",
  "/yyb.RpcService/Listen",
  "/yyb.RpcService/Login",
  "/yyb.RpcService/LoadGameData",
  "/yyb.RpcService/SaveGameData",
  "/yyb.RpcService/Ranking",
  "/yyb.RpcService/RankingList",
};

std::unique_ptr< RpcService::Stub> RpcService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RpcService::Stub> stub(new RpcService::Stub(channel));
  return stub;
}

RpcService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RpcServiceExample_(RpcService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Listen_(RpcService_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Login_(RpcService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoadGameData_(RpcService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SaveGameData_(RpcService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Ranking_(RpcService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RankingList_(RpcService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RpcService::Stub::RpcServiceExample(::grpc::ClientContext* context, const ::yyb::RpcServiceExampleRequest& request, ::yyb::RpcServiceExampleReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RpcServiceExample_, context, request, response);
}

void RpcService::Stub::experimental_async::RpcServiceExample(::grpc::ClientContext* context, const ::yyb::RpcServiceExampleRequest* request, ::yyb::RpcServiceExampleReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RpcServiceExample_, context, request, response, std::move(f));
}

void RpcService::Stub::experimental_async::RpcServiceExample(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::RpcServiceExampleReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RpcServiceExample_, context, request, response, std::move(f));
}

void RpcService::Stub::experimental_async::RpcServiceExample(::grpc::ClientContext* context, const ::yyb::RpcServiceExampleRequest* request, ::yyb::RpcServiceExampleReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RpcServiceExample_, context, request, response, reactor);
}

void RpcService::Stub::experimental_async::RpcServiceExample(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::RpcServiceExampleReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RpcServiceExample_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::yyb::RpcServiceExampleReply>* RpcService::Stub::AsyncRpcServiceExampleRaw(::grpc::ClientContext* context, const ::yyb::RpcServiceExampleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::yyb::RpcServiceExampleReply>::Create(channel_.get(), cq, rpcmethod_RpcServiceExample_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::yyb::RpcServiceExampleReply>* RpcService::Stub::PrepareAsyncRpcServiceExampleRaw(::grpc::ClientContext* context, const ::yyb::RpcServiceExampleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::yyb::RpcServiceExampleReply>::Create(channel_.get(), cq, rpcmethod_RpcServiceExample_, context, request, false);
}

::grpc::ClientReader< ::yyb::PushNotification>* RpcService::Stub::ListenRaw(::grpc::ClientContext* context, const ::yyb::Empty& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::yyb::PushNotification>::Create(channel_.get(), rpcmethod_Listen_, context, request);
}

void RpcService::Stub::experimental_async::Listen(::grpc::ClientContext* context, ::yyb::Empty* request, ::grpc::experimental::ClientReadReactor< ::yyb::PushNotification>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::yyb::PushNotification>::Create(stub_->channel_.get(), stub_->rpcmethod_Listen_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::yyb::PushNotification>* RpcService::Stub::AsyncListenRaw(::grpc::ClientContext* context, const ::yyb::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::yyb::PushNotification>::Create(channel_.get(), cq, rpcmethod_Listen_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::yyb::PushNotification>* RpcService::Stub::PrepareAsyncListenRaw(::grpc::ClientContext* context, const ::yyb::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::yyb::PushNotification>::Create(channel_.get(), cq, rpcmethod_Listen_, context, request, false, nullptr);
}

::grpc::Status RpcService::Stub::Login(::grpc::ClientContext* context, const ::yyb::LoginRequest& request, ::yyb::LoginReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Login_, context, request, response);
}

void RpcService::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::yyb::LoginRequest* request, ::yyb::LoginReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void RpcService::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::LoginReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void RpcService::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::yyb::LoginRequest* request, ::yyb::LoginReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

void RpcService::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::LoginReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::yyb::LoginReply>* RpcService::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::yyb::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::yyb::LoginReply>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::yyb::LoginReply>* RpcService::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::yyb::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::yyb::LoginReply>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, false);
}

::grpc::Status RpcService::Stub::LoadGameData(::grpc::ClientContext* context, const ::yyb::GameDataRequest& request, ::yyb::GameDataReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LoadGameData_, context, request, response);
}

void RpcService::Stub::experimental_async::LoadGameData(::grpc::ClientContext* context, const ::yyb::GameDataRequest* request, ::yyb::GameDataReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoadGameData_, context, request, response, std::move(f));
}

void RpcService::Stub::experimental_async::LoadGameData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::GameDataReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoadGameData_, context, request, response, std::move(f));
}

void RpcService::Stub::experimental_async::LoadGameData(::grpc::ClientContext* context, const ::yyb::GameDataRequest* request, ::yyb::GameDataReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LoadGameData_, context, request, response, reactor);
}

void RpcService::Stub::experimental_async::LoadGameData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::GameDataReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LoadGameData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::yyb::GameDataReply>* RpcService::Stub::AsyncLoadGameDataRaw(::grpc::ClientContext* context, const ::yyb::GameDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::yyb::GameDataReply>::Create(channel_.get(), cq, rpcmethod_LoadGameData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::yyb::GameDataReply>* RpcService::Stub::PrepareAsyncLoadGameDataRaw(::grpc::ClientContext* context, const ::yyb::GameDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::yyb::GameDataReply>::Create(channel_.get(), cq, rpcmethod_LoadGameData_, context, request, false);
}

::grpc::Status RpcService::Stub::SaveGameData(::grpc::ClientContext* context, const ::yyb::GameDataRequest& request, ::yyb::GameDataReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SaveGameData_, context, request, response);
}

void RpcService::Stub::experimental_async::SaveGameData(::grpc::ClientContext* context, const ::yyb::GameDataRequest* request, ::yyb::GameDataReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SaveGameData_, context, request, response, std::move(f));
}

void RpcService::Stub::experimental_async::SaveGameData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::GameDataReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SaveGameData_, context, request, response, std::move(f));
}

void RpcService::Stub::experimental_async::SaveGameData(::grpc::ClientContext* context, const ::yyb::GameDataRequest* request, ::yyb::GameDataReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SaveGameData_, context, request, response, reactor);
}

void RpcService::Stub::experimental_async::SaveGameData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::GameDataReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SaveGameData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::yyb::GameDataReply>* RpcService::Stub::AsyncSaveGameDataRaw(::grpc::ClientContext* context, const ::yyb::GameDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::yyb::GameDataReply>::Create(channel_.get(), cq, rpcmethod_SaveGameData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::yyb::GameDataReply>* RpcService::Stub::PrepareAsyncSaveGameDataRaw(::grpc::ClientContext* context, const ::yyb::GameDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::yyb::GameDataReply>::Create(channel_.get(), cq, rpcmethod_SaveGameData_, context, request, false);
}

::grpc::Status RpcService::Stub::Ranking(::grpc::ClientContext* context, const ::yyb::RankingRequest& request, ::yyb::RankingReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Ranking_, context, request, response);
}

void RpcService::Stub::experimental_async::Ranking(::grpc::ClientContext* context, const ::yyb::RankingRequest* request, ::yyb::RankingReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Ranking_, context, request, response, std::move(f));
}

void RpcService::Stub::experimental_async::Ranking(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::RankingReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Ranking_, context, request, response, std::move(f));
}

void RpcService::Stub::experimental_async::Ranking(::grpc::ClientContext* context, const ::yyb::RankingRequest* request, ::yyb::RankingReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Ranking_, context, request, response, reactor);
}

void RpcService::Stub::experimental_async::Ranking(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::RankingReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Ranking_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::yyb::RankingReply>* RpcService::Stub::AsyncRankingRaw(::grpc::ClientContext* context, const ::yyb::RankingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::yyb::RankingReply>::Create(channel_.get(), cq, rpcmethod_Ranking_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::yyb::RankingReply>* RpcService::Stub::PrepareAsyncRankingRaw(::grpc::ClientContext* context, const ::yyb::RankingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::yyb::RankingReply>::Create(channel_.get(), cq, rpcmethod_Ranking_, context, request, false);
}

::grpc::Status RpcService::Stub::RankingList(::grpc::ClientContext* context, const ::yyb::RankingListRequest& request, ::yyb::RankingListReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RankingList_, context, request, response);
}

void RpcService::Stub::experimental_async::RankingList(::grpc::ClientContext* context, const ::yyb::RankingListRequest* request, ::yyb::RankingListReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RankingList_, context, request, response, std::move(f));
}

void RpcService::Stub::experimental_async::RankingList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::RankingListReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RankingList_, context, request, response, std::move(f));
}

void RpcService::Stub::experimental_async::RankingList(::grpc::ClientContext* context, const ::yyb::RankingListRequest* request, ::yyb::RankingListReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RankingList_, context, request, response, reactor);
}

void RpcService::Stub::experimental_async::RankingList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::RankingListReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RankingList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::yyb::RankingListReply>* RpcService::Stub::AsyncRankingListRaw(::grpc::ClientContext* context, const ::yyb::RankingListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::yyb::RankingListReply>::Create(channel_.get(), cq, rpcmethod_RankingList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::yyb::RankingListReply>* RpcService::Stub::PrepareAsyncRankingListRaw(::grpc::ClientContext* context, const ::yyb::RankingListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::yyb::RankingListReply>::Create(channel_.get(), cq, rpcmethod_RankingList_, context, request, false);
}

RpcService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RpcService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RpcService::Service, ::yyb::RpcServiceExampleRequest, ::yyb::RpcServiceExampleReply>(
          std::mem_fn(&RpcService::Service::RpcServiceExample), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RpcService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RpcService::Service, ::yyb::Empty, ::yyb::PushNotification>(
          std::mem_fn(&RpcService::Service::Listen), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RpcService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RpcService::Service, ::yyb::LoginRequest, ::yyb::LoginReply>(
          std::mem_fn(&RpcService::Service::Login), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RpcService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RpcService::Service, ::yyb::GameDataRequest, ::yyb::GameDataReply>(
          std::mem_fn(&RpcService::Service::LoadGameData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RpcService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RpcService::Service, ::yyb::GameDataRequest, ::yyb::GameDataReply>(
          std::mem_fn(&RpcService::Service::SaveGameData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RpcService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RpcService::Service, ::yyb::RankingRequest, ::yyb::RankingReply>(
          std::mem_fn(&RpcService::Service::Ranking), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RpcService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RpcService::Service, ::yyb::RankingListRequest, ::yyb::RankingListReply>(
          std::mem_fn(&RpcService::Service::RankingList), this)));
}

RpcService::Service::~Service() {
}

::grpc::Status RpcService::Service::RpcServiceExample(::grpc::ServerContext* context, const ::yyb::RpcServiceExampleRequest* request, ::yyb::RpcServiceExampleReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RpcService::Service::Listen(::grpc::ServerContext* context, const ::yyb::Empty* request, ::grpc::ServerWriter< ::yyb::PushNotification>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RpcService::Service::Login(::grpc::ServerContext* context, const ::yyb::LoginRequest* request, ::yyb::LoginReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RpcService::Service::LoadGameData(::grpc::ServerContext* context, const ::yyb::GameDataRequest* request, ::yyb::GameDataReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RpcService::Service::SaveGameData(::grpc::ServerContext* context, const ::yyb::GameDataRequest* request, ::yyb::GameDataReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RpcService::Service::Ranking(::grpc::ServerContext* context, const ::yyb::RankingRequest* request, ::yyb::RankingReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RpcService::Service::RankingList(::grpc::ServerContext* context, const ::yyb::RankingListRequest* request, ::yyb::RankingListReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace yyb

