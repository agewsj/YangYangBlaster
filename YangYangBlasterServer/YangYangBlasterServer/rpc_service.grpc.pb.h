// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rpc_service.proto
#ifndef GRPC_rpc_5fservice_2eproto__INCLUDED
#define GRPC_rpc_5fservice_2eproto__INCLUDED

#include "rpc_service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace yyb {

// The rpc service definition.
class RpcService final {
 public:
  static constexpr char const* service_full_name() {
    return "yyb.RpcService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // rpc 예시
    virtual ::grpc::Status RpcServiceExample(::grpc::ClientContext* context, const ::yyb::RpcServiceExampleRequest& request, ::yyb::RpcServiceExampleReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yyb::RpcServiceExampleReply>> AsyncRpcServiceExample(::grpc::ClientContext* context, const ::yyb::RpcServiceExampleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yyb::RpcServiceExampleReply>>(AsyncRpcServiceExampleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yyb::RpcServiceExampleReply>> PrepareAsyncRpcServiceExample(::grpc::ClientContext* context, const ::yyb::RpcServiceExampleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yyb::RpcServiceExampleReply>>(PrepareAsyncRpcServiceExampleRaw(context, request, cq));
    }
    // 푸시용 리슨 (서버 -> 클라)
    std::unique_ptr< ::grpc::ClientReaderInterface< ::yyb::PushNotification>> Listen(::grpc::ClientContext* context, const ::yyb::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::yyb::PushNotification>>(ListenRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::yyb::PushNotification>> AsyncListen(::grpc::ClientContext* context, const ::yyb::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::yyb::PushNotification>>(AsyncListenRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::yyb::PushNotification>> PrepareAsyncListen(::grpc::ClientContext* context, const ::yyb::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::yyb::PushNotification>>(PrepareAsyncListenRaw(context, request, cq));
    }
    // 로그인 요청
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::yyb::LoginRequest& request, ::yyb::LoginReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yyb::LoginReply>> AsyncLogin(::grpc::ClientContext* context, const ::yyb::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yyb::LoginReply>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yyb::LoginReply>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::yyb::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yyb::LoginReply>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    // 랭킹 기록 요청
    virtual ::grpc::Status Ranking(::grpc::ClientContext* context, const ::yyb::RankingRequest& request, ::yyb::RankingReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yyb::RankingReply>> AsyncRanking(::grpc::ClientContext* context, const ::yyb::RankingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yyb::RankingReply>>(AsyncRankingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yyb::RankingReply>> PrepareAsyncRanking(::grpc::ClientContext* context, const ::yyb::RankingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yyb::RankingReply>>(PrepareAsyncRankingRaw(context, request, cq));
    }
    // 랭킹 리스트 요청
    virtual ::grpc::Status RankingList(::grpc::ClientContext* context, const ::yyb::RankingListRequest& request, ::yyb::RankingListReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yyb::RankingListReply>> AsyncRankingList(::grpc::ClientContext* context, const ::yyb::RankingListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yyb::RankingListReply>>(AsyncRankingListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yyb::RankingListReply>> PrepareAsyncRankingList(::grpc::ClientContext* context, const ::yyb::RankingListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yyb::RankingListReply>>(PrepareAsyncRankingListRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // rpc 예시
      virtual void RpcServiceExample(::grpc::ClientContext* context, const ::yyb::RpcServiceExampleRequest* request, ::yyb::RpcServiceExampleReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RpcServiceExample(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::RpcServiceExampleReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RpcServiceExample(::grpc::ClientContext* context, const ::yyb::RpcServiceExampleRequest* request, ::yyb::RpcServiceExampleReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RpcServiceExample(::grpc::ClientContext* context, const ::yyb::RpcServiceExampleRequest* request, ::yyb::RpcServiceExampleReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RpcServiceExample(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::RpcServiceExampleReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RpcServiceExample(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::RpcServiceExampleReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 푸시용 리슨 (서버 -> 클라)
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Listen(::grpc::ClientContext* context, ::yyb::Empty* request, ::grpc::ClientReadReactor< ::yyb::PushNotification>* reactor) = 0;
      #else
      virtual void Listen(::grpc::ClientContext* context, ::yyb::Empty* request, ::grpc::experimental::ClientReadReactor< ::yyb::PushNotification>* reactor) = 0;
      #endif
      // 로그인 요청
      virtual void Login(::grpc::ClientContext* context, const ::yyb::LoginRequest* request, ::yyb::LoginReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::LoginReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Login(::grpc::ClientContext* context, const ::yyb::LoginRequest* request, ::yyb::LoginReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Login(::grpc::ClientContext* context, const ::yyb::LoginRequest* request, ::yyb::LoginReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::LoginReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::LoginReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 랭킹 기록 요청
      virtual void Ranking(::grpc::ClientContext* context, const ::yyb::RankingRequest* request, ::yyb::RankingReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Ranking(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::RankingReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Ranking(::grpc::ClientContext* context, const ::yyb::RankingRequest* request, ::yyb::RankingReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Ranking(::grpc::ClientContext* context, const ::yyb::RankingRequest* request, ::yyb::RankingReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Ranking(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::RankingReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Ranking(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::RankingReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 랭킹 리스트 요청
      virtual void RankingList(::grpc::ClientContext* context, const ::yyb::RankingListRequest* request, ::yyb::RankingListReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RankingList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::RankingListReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RankingList(::grpc::ClientContext* context, const ::yyb::RankingListRequest* request, ::yyb::RankingListReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RankingList(::grpc::ClientContext* context, const ::yyb::RankingListRequest* request, ::yyb::RankingListReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RankingList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::RankingListReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RankingList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::RankingListReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::yyb::RpcServiceExampleReply>* AsyncRpcServiceExampleRaw(::grpc::ClientContext* context, const ::yyb::RpcServiceExampleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::yyb::RpcServiceExampleReply>* PrepareAsyncRpcServiceExampleRaw(::grpc::ClientContext* context, const ::yyb::RpcServiceExampleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::yyb::PushNotification>* ListenRaw(::grpc::ClientContext* context, const ::yyb::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::yyb::PushNotification>* AsyncListenRaw(::grpc::ClientContext* context, const ::yyb::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::yyb::PushNotification>* PrepareAsyncListenRaw(::grpc::ClientContext* context, const ::yyb::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::yyb::LoginReply>* AsyncLoginRaw(::grpc::ClientContext* context, const ::yyb::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::yyb::LoginReply>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::yyb::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::yyb::RankingReply>* AsyncRankingRaw(::grpc::ClientContext* context, const ::yyb::RankingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::yyb::RankingReply>* PrepareAsyncRankingRaw(::grpc::ClientContext* context, const ::yyb::RankingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::yyb::RankingListReply>* AsyncRankingListRaw(::grpc::ClientContext* context, const ::yyb::RankingListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::yyb::RankingListReply>* PrepareAsyncRankingListRaw(::grpc::ClientContext* context, const ::yyb::RankingListRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RpcServiceExample(::grpc::ClientContext* context, const ::yyb::RpcServiceExampleRequest& request, ::yyb::RpcServiceExampleReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yyb::RpcServiceExampleReply>> AsyncRpcServiceExample(::grpc::ClientContext* context, const ::yyb::RpcServiceExampleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yyb::RpcServiceExampleReply>>(AsyncRpcServiceExampleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yyb::RpcServiceExampleReply>> PrepareAsyncRpcServiceExample(::grpc::ClientContext* context, const ::yyb::RpcServiceExampleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yyb::RpcServiceExampleReply>>(PrepareAsyncRpcServiceExampleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::yyb::PushNotification>> Listen(::grpc::ClientContext* context, const ::yyb::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::yyb::PushNotification>>(ListenRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::yyb::PushNotification>> AsyncListen(::grpc::ClientContext* context, const ::yyb::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::yyb::PushNotification>>(AsyncListenRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::yyb::PushNotification>> PrepareAsyncListen(::grpc::ClientContext* context, const ::yyb::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::yyb::PushNotification>>(PrepareAsyncListenRaw(context, request, cq));
    }
    ::grpc::Status Login(::grpc::ClientContext* context, const ::yyb::LoginRequest& request, ::yyb::LoginReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yyb::LoginReply>> AsyncLogin(::grpc::ClientContext* context, const ::yyb::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yyb::LoginReply>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yyb::LoginReply>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::yyb::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yyb::LoginReply>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    ::grpc::Status Ranking(::grpc::ClientContext* context, const ::yyb::RankingRequest& request, ::yyb::RankingReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yyb::RankingReply>> AsyncRanking(::grpc::ClientContext* context, const ::yyb::RankingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yyb::RankingReply>>(AsyncRankingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yyb::RankingReply>> PrepareAsyncRanking(::grpc::ClientContext* context, const ::yyb::RankingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yyb::RankingReply>>(PrepareAsyncRankingRaw(context, request, cq));
    }
    ::grpc::Status RankingList(::grpc::ClientContext* context, const ::yyb::RankingListRequest& request, ::yyb::RankingListReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yyb::RankingListReply>> AsyncRankingList(::grpc::ClientContext* context, const ::yyb::RankingListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yyb::RankingListReply>>(AsyncRankingListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yyb::RankingListReply>> PrepareAsyncRankingList(::grpc::ClientContext* context, const ::yyb::RankingListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yyb::RankingListReply>>(PrepareAsyncRankingListRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void RpcServiceExample(::grpc::ClientContext* context, const ::yyb::RpcServiceExampleRequest* request, ::yyb::RpcServiceExampleReply* response, std::function<void(::grpc::Status)>) override;
      void RpcServiceExample(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::RpcServiceExampleReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RpcServiceExample(::grpc::ClientContext* context, const ::yyb::RpcServiceExampleRequest* request, ::yyb::RpcServiceExampleReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RpcServiceExample(::grpc::ClientContext* context, const ::yyb::RpcServiceExampleRequest* request, ::yyb::RpcServiceExampleReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RpcServiceExample(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::RpcServiceExampleReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RpcServiceExample(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::RpcServiceExampleReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Listen(::grpc::ClientContext* context, ::yyb::Empty* request, ::grpc::ClientReadReactor< ::yyb::PushNotification>* reactor) override;
      #else
      void Listen(::grpc::ClientContext* context, ::yyb::Empty* request, ::grpc::experimental::ClientReadReactor< ::yyb::PushNotification>* reactor) override;
      #endif
      void Login(::grpc::ClientContext* context, const ::yyb::LoginRequest* request, ::yyb::LoginReply* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::LoginReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Login(::grpc::ClientContext* context, const ::yyb::LoginRequest* request, ::yyb::LoginReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Login(::grpc::ClientContext* context, const ::yyb::LoginRequest* request, ::yyb::LoginReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::LoginReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::LoginReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Ranking(::grpc::ClientContext* context, const ::yyb::RankingRequest* request, ::yyb::RankingReply* response, std::function<void(::grpc::Status)>) override;
      void Ranking(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::RankingReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Ranking(::grpc::ClientContext* context, const ::yyb::RankingRequest* request, ::yyb::RankingReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Ranking(::grpc::ClientContext* context, const ::yyb::RankingRequest* request, ::yyb::RankingReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Ranking(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::RankingReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Ranking(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::RankingReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RankingList(::grpc::ClientContext* context, const ::yyb::RankingListRequest* request, ::yyb::RankingListReply* response, std::function<void(::grpc::Status)>) override;
      void RankingList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::RankingListReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RankingList(::grpc::ClientContext* context, const ::yyb::RankingListRequest* request, ::yyb::RankingListReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RankingList(::grpc::ClientContext* context, const ::yyb::RankingListRequest* request, ::yyb::RankingListReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RankingList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::RankingListReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RankingList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::yyb::RankingListReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::yyb::RpcServiceExampleReply>* AsyncRpcServiceExampleRaw(::grpc::ClientContext* context, const ::yyb::RpcServiceExampleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::yyb::RpcServiceExampleReply>* PrepareAsyncRpcServiceExampleRaw(::grpc::ClientContext* context, const ::yyb::RpcServiceExampleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::yyb::PushNotification>* ListenRaw(::grpc::ClientContext* context, const ::yyb::Empty& request) override;
    ::grpc::ClientAsyncReader< ::yyb::PushNotification>* AsyncListenRaw(::grpc::ClientContext* context, const ::yyb::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::yyb::PushNotification>* PrepareAsyncListenRaw(::grpc::ClientContext* context, const ::yyb::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::yyb::LoginReply>* AsyncLoginRaw(::grpc::ClientContext* context, const ::yyb::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::yyb::LoginReply>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::yyb::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::yyb::RankingReply>* AsyncRankingRaw(::grpc::ClientContext* context, const ::yyb::RankingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::yyb::RankingReply>* PrepareAsyncRankingRaw(::grpc::ClientContext* context, const ::yyb::RankingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::yyb::RankingListReply>* AsyncRankingListRaw(::grpc::ClientContext* context, const ::yyb::RankingListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::yyb::RankingListReply>* PrepareAsyncRankingListRaw(::grpc::ClientContext* context, const ::yyb::RankingListRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RpcServiceExample_;
    const ::grpc::internal::RpcMethod rpcmethod_Listen_;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
    const ::grpc::internal::RpcMethod rpcmethod_Ranking_;
    const ::grpc::internal::RpcMethod rpcmethod_RankingList_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // rpc 예시
    virtual ::grpc::Status RpcServiceExample(::grpc::ServerContext* context, const ::yyb::RpcServiceExampleRequest* request, ::yyb::RpcServiceExampleReply* response);
    // 푸시용 리슨 (서버 -> 클라)
    virtual ::grpc::Status Listen(::grpc::ServerContext* context, const ::yyb::Empty* request, ::grpc::ServerWriter< ::yyb::PushNotification>* writer);
    // 로그인 요청
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::yyb::LoginRequest* request, ::yyb::LoginReply* response);
    // 랭킹 기록 요청
    virtual ::grpc::Status Ranking(::grpc::ServerContext* context, const ::yyb::RankingRequest* request, ::yyb::RankingReply* response);
    // 랭킹 리스트 요청
    virtual ::grpc::Status RankingList(::grpc::ServerContext* context, const ::yyb::RankingListRequest* request, ::yyb::RankingListReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RpcServiceExample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RpcServiceExample() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RpcServiceExample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RpcServiceExample(::grpc::ServerContext* /*context*/, const ::yyb::RpcServiceExampleRequest* /*request*/, ::yyb::RpcServiceExampleReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRpcServiceExample(::grpc::ServerContext* context, ::yyb::RpcServiceExampleRequest* request, ::grpc::ServerAsyncResponseWriter< ::yyb::RpcServiceExampleReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Listen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Listen() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Listen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Listen(::grpc::ServerContext* /*context*/, const ::yyb::Empty* /*request*/, ::grpc::ServerWriter< ::yyb::PushNotification>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListen(::grpc::ServerContext* context, ::yyb::Empty* request, ::grpc::ServerAsyncWriter< ::yyb::PushNotification>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::yyb::LoginRequest* /*request*/, ::yyb::LoginReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::yyb::LoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::yyb::LoginReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Ranking : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Ranking() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Ranking() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ranking(::grpc::ServerContext* /*context*/, const ::yyb::RankingRequest* /*request*/, ::yyb::RankingReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRanking(::grpc::ServerContext* context, ::yyb::RankingRequest* request, ::grpc::ServerAsyncResponseWriter< ::yyb::RankingReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RankingList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RankingList() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RankingList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RankingList(::grpc::ServerContext* /*context*/, const ::yyb::RankingListRequest* /*request*/, ::yyb::RankingListReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRankingList(::grpc::ServerContext* context, ::yyb::RankingListRequest* request, ::grpc::ServerAsyncResponseWriter< ::yyb::RankingListReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RpcServiceExample<WithAsyncMethod_Listen<WithAsyncMethod_Login<WithAsyncMethod_Ranking<WithAsyncMethod_RankingList<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RpcServiceExample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RpcServiceExample() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::yyb::RpcServiceExampleRequest, ::yyb::RpcServiceExampleReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::yyb::RpcServiceExampleRequest* request, ::yyb::RpcServiceExampleReply* response) { return this->RpcServiceExample(context, request, response); }));}
    void SetMessageAllocatorFor_RpcServiceExample(
        ::grpc::experimental::MessageAllocator< ::yyb::RpcServiceExampleRequest, ::yyb::RpcServiceExampleReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::yyb::RpcServiceExampleRequest, ::yyb::RpcServiceExampleReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RpcServiceExample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RpcServiceExample(::grpc::ServerContext* /*context*/, const ::yyb::RpcServiceExampleRequest* /*request*/, ::yyb::RpcServiceExampleReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RpcServiceExample(
      ::grpc::CallbackServerContext* /*context*/, const ::yyb::RpcServiceExampleRequest* /*request*/, ::yyb::RpcServiceExampleReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RpcServiceExample(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::yyb::RpcServiceExampleRequest* /*request*/, ::yyb::RpcServiceExampleReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Listen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Listen() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::yyb::Empty, ::yyb::PushNotification>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::yyb::Empty* request) { return this->Listen(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_Listen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Listen(::grpc::ServerContext* /*context*/, const ::yyb::Empty* /*request*/, ::grpc::ServerWriter< ::yyb::PushNotification>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::yyb::PushNotification>* Listen(
      ::grpc::CallbackServerContext* /*context*/, const ::yyb::Empty* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::yyb::PushNotification>* Listen(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::yyb::Empty* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Login() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::yyb::LoginRequest, ::yyb::LoginReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::yyb::LoginRequest* request, ::yyb::LoginReply* response) { return this->Login(context, request, response); }));}
    void SetMessageAllocatorFor_Login(
        ::grpc::experimental::MessageAllocator< ::yyb::LoginRequest, ::yyb::LoginReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::yyb::LoginRequest, ::yyb::LoginReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::yyb::LoginRequest* /*request*/, ::yyb::LoginReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::yyb::LoginRequest* /*request*/, ::yyb::LoginReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Login(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::yyb::LoginRequest* /*request*/, ::yyb::LoginReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Ranking : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Ranking() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::yyb::RankingRequest, ::yyb::RankingReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::yyb::RankingRequest* request, ::yyb::RankingReply* response) { return this->Ranking(context, request, response); }));}
    void SetMessageAllocatorFor_Ranking(
        ::grpc::experimental::MessageAllocator< ::yyb::RankingRequest, ::yyb::RankingReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::yyb::RankingRequest, ::yyb::RankingReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Ranking() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ranking(::grpc::ServerContext* /*context*/, const ::yyb::RankingRequest* /*request*/, ::yyb::RankingReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Ranking(
      ::grpc::CallbackServerContext* /*context*/, const ::yyb::RankingRequest* /*request*/, ::yyb::RankingReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Ranking(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::yyb::RankingRequest* /*request*/, ::yyb::RankingReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RankingList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RankingList() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::yyb::RankingListRequest, ::yyb::RankingListReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::yyb::RankingListRequest* request, ::yyb::RankingListReply* response) { return this->RankingList(context, request, response); }));}
    void SetMessageAllocatorFor_RankingList(
        ::grpc::experimental::MessageAllocator< ::yyb::RankingListRequest, ::yyb::RankingListReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::yyb::RankingListRequest, ::yyb::RankingListReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RankingList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RankingList(::grpc::ServerContext* /*context*/, const ::yyb::RankingListRequest* /*request*/, ::yyb::RankingListReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RankingList(
      ::grpc::CallbackServerContext* /*context*/, const ::yyb::RankingListRequest* /*request*/, ::yyb::RankingListReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RankingList(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::yyb::RankingListRequest* /*request*/, ::yyb::RankingListReply* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_RpcServiceExample<ExperimentalWithCallbackMethod_Listen<ExperimentalWithCallbackMethod_Login<ExperimentalWithCallbackMethod_Ranking<ExperimentalWithCallbackMethod_RankingList<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_RpcServiceExample<ExperimentalWithCallbackMethod_Listen<ExperimentalWithCallbackMethod_Login<ExperimentalWithCallbackMethod_Ranking<ExperimentalWithCallbackMethod_RankingList<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RpcServiceExample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RpcServiceExample() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RpcServiceExample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RpcServiceExample(::grpc::ServerContext* /*context*/, const ::yyb::RpcServiceExampleRequest* /*request*/, ::yyb::RpcServiceExampleReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Listen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Listen() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Listen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Listen(::grpc::ServerContext* /*context*/, const ::yyb::Empty* /*request*/, ::grpc::ServerWriter< ::yyb::PushNotification>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::yyb::LoginRequest* /*request*/, ::yyb::LoginReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Ranking : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Ranking() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Ranking() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ranking(::grpc::ServerContext* /*context*/, const ::yyb::RankingRequest* /*request*/, ::yyb::RankingReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RankingList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RankingList() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RankingList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RankingList(::grpc::ServerContext* /*context*/, const ::yyb::RankingListRequest* /*request*/, ::yyb::RankingListReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RpcServiceExample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RpcServiceExample() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RpcServiceExample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RpcServiceExample(::grpc::ServerContext* /*context*/, const ::yyb::RpcServiceExampleRequest* /*request*/, ::yyb::RpcServiceExampleReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRpcServiceExample(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Listen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Listen() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Listen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Listen(::grpc::ServerContext* /*context*/, const ::yyb::Empty* /*request*/, ::grpc::ServerWriter< ::yyb::PushNotification>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListen(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Login() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::yyb::LoginRequest* /*request*/, ::yyb::LoginReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Ranking : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Ranking() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Ranking() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ranking(::grpc::ServerContext* /*context*/, const ::yyb::RankingRequest* /*request*/, ::yyb::RankingReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRanking(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RankingList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RankingList() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_RankingList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RankingList(::grpc::ServerContext* /*context*/, const ::yyb::RankingListRequest* /*request*/, ::yyb::RankingListReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRankingList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RpcServiceExample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RpcServiceExample() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RpcServiceExample(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RpcServiceExample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RpcServiceExample(::grpc::ServerContext* /*context*/, const ::yyb::RpcServiceExampleRequest* /*request*/, ::yyb::RpcServiceExampleReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RpcServiceExample(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RpcServiceExample(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Listen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Listen() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->Listen(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_Listen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Listen(::grpc::ServerContext* /*context*/, const ::yyb::Empty* /*request*/, ::grpc::ServerWriter< ::yyb::PushNotification>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Listen(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* Listen(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Login() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Login(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::yyb::LoginRequest* /*request*/, ::yyb::LoginReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Login(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Ranking : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Ranking() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Ranking(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Ranking() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ranking(::grpc::ServerContext* /*context*/, const ::yyb::RankingRequest* /*request*/, ::yyb::RankingReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Ranking(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Ranking(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RankingList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RankingList() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RankingList(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RankingList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RankingList(::grpc::ServerContext* /*context*/, const ::yyb::RankingListRequest* /*request*/, ::yyb::RankingListReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RankingList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RankingList(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RpcServiceExample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RpcServiceExample() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::yyb::RpcServiceExampleRequest, ::yyb::RpcServiceExampleReply>(std::bind(&WithStreamedUnaryMethod_RpcServiceExample<BaseClass>::StreamedRpcServiceExample, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RpcServiceExample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RpcServiceExample(::grpc::ServerContext* /*context*/, const ::yyb::RpcServiceExampleRequest* /*request*/, ::yyb::RpcServiceExampleReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRpcServiceExample(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::yyb::RpcServiceExampleRequest,::yyb::RpcServiceExampleReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::yyb::LoginRequest, ::yyb::LoginReply>(std::bind(&WithStreamedUnaryMethod_Login<BaseClass>::StreamedLogin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::yyb::LoginRequest* /*request*/, ::yyb::LoginReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::yyb::LoginRequest,::yyb::LoginReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Ranking : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Ranking() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::yyb::RankingRequest, ::yyb::RankingReply>(std::bind(&WithStreamedUnaryMethod_Ranking<BaseClass>::StreamedRanking, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Ranking() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Ranking(::grpc::ServerContext* /*context*/, const ::yyb::RankingRequest* /*request*/, ::yyb::RankingReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRanking(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::yyb::RankingRequest,::yyb::RankingReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RankingList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RankingList() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::yyb::RankingListRequest, ::yyb::RankingListReply>(std::bind(&WithStreamedUnaryMethod_RankingList<BaseClass>::StreamedRankingList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RankingList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RankingList(::grpc::ServerContext* /*context*/, const ::yyb::RankingListRequest* /*request*/, ::yyb::RankingListReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRankingList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::yyb::RankingListRequest,::yyb::RankingListReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RpcServiceExample<WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_Ranking<WithStreamedUnaryMethod_RankingList<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Listen : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Listen() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::yyb::Empty, ::yyb::PushNotification>(std::bind(&WithSplitStreamingMethod_Listen<BaseClass>::StreamedListen, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Listen() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Listen(::grpc::ServerContext* /*context*/, const ::yyb::Empty* /*request*/, ::grpc::ServerWriter< ::yyb::PushNotification>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedListen(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::yyb::Empty,::yyb::PushNotification>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Listen<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_RpcServiceExample<WithSplitStreamingMethod_Listen<WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_Ranking<WithStreamedUnaryMethod_RankingList<Service > > > > > StreamedService;
};

}  // namespace yyb


#endif  // GRPC_rpc_5fservice_2eproto__INCLUDED
