// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpc_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpc_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_5fservice_2eproto;
namespace yyb {
class LoginReply;
class LoginReplyDefaultTypeInternal;
extern LoginReplyDefaultTypeInternal _LoginReply_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class RpcServiceExampleReply;
class RpcServiceExampleReplyDefaultTypeInternal;
extern RpcServiceExampleReplyDefaultTypeInternal _RpcServiceExampleReply_default_instance_;
class RpcServiceExampleRequest;
class RpcServiceExampleRequestDefaultTypeInternal;
extern RpcServiceExampleRequestDefaultTypeInternal _RpcServiceExampleRequest_default_instance_;
}  // namespace yyb
PROTOBUF_NAMESPACE_OPEN
template<> ::yyb::LoginReply* Arena::CreateMaybeMessage<::yyb::LoginReply>(Arena*);
template<> ::yyb::LoginRequest* Arena::CreateMaybeMessage<::yyb::LoginRequest>(Arena*);
template<> ::yyb::RpcServiceExampleReply* Arena::CreateMaybeMessage<::yyb::RpcServiceExampleReply>(Arena*);
template<> ::yyb::RpcServiceExampleRequest* Arena::CreateMaybeMessage<::yyb::RpcServiceExampleRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace yyb {

// ===================================================================

class RpcServiceExampleRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yyb.RpcServiceExampleRequest) */ {
 public:
  RpcServiceExampleRequest();
  virtual ~RpcServiceExampleRequest();

  RpcServiceExampleRequest(const RpcServiceExampleRequest& from);
  RpcServiceExampleRequest(RpcServiceExampleRequest&& from) noexcept
    : RpcServiceExampleRequest() {
    *this = ::std::move(from);
  }

  inline RpcServiceExampleRequest& operator=(const RpcServiceExampleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcServiceExampleRequest& operator=(RpcServiceExampleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RpcServiceExampleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcServiceExampleRequest* internal_default_instance() {
    return reinterpret_cast<const RpcServiceExampleRequest*>(
               &_RpcServiceExampleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RpcServiceExampleRequest& a, RpcServiceExampleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcServiceExampleRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RpcServiceExampleRequest* New() const final {
    return CreateMaybeMessage<RpcServiceExampleRequest>(nullptr);
  }

  RpcServiceExampleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RpcServiceExampleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RpcServiceExampleRequest& from);
  void MergeFrom(const RpcServiceExampleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcServiceExampleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yyb.RpcServiceExampleRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fservice_2eproto);
    return ::descriptor_table_rpc_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArg5FieldNumber = 5,
    kArg3FieldNumber = 3,
    kArg1FieldNumber = 1,
    kArg2FieldNumber = 2,
    kArg4FieldNumber = 4,
  };
  // repeated int32 arg5 = 5;
  int arg5_size() const;
  private:
  int _internal_arg5_size() const;
  public:
  void clear_arg5();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_arg5(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_arg5() const;
  void _internal_add_arg5(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_arg5();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 arg5(int index) const;
  void set_arg5(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_arg5(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      arg5() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_arg5();

  // string arg3 = 3;
  void clear_arg3();
  const std::string& arg3() const;
  void set_arg3(const std::string& value);
  void set_arg3(std::string&& value);
  void set_arg3(const char* value);
  void set_arg3(const char* value, size_t size);
  std::string* mutable_arg3();
  std::string* release_arg3();
  void set_allocated_arg3(std::string* arg3);
  private:
  const std::string& _internal_arg3() const;
  void _internal_set_arg3(const std::string& value);
  std::string* _internal_mutable_arg3();
  public:

  // int32 arg1 = 1;
  void clear_arg1();
  ::PROTOBUF_NAMESPACE_ID::int32 arg1() const;
  void set_arg1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_arg1() const;
  void _internal_set_arg1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float arg2 = 2;
  void clear_arg2();
  float arg2() const;
  void set_arg2(float value);
  private:
  float _internal_arg2() const;
  void _internal_set_arg2(float value);
  public:

  // bool arg4 = 4;
  void clear_arg4();
  bool arg4() const;
  void set_arg4(bool value);
  private:
  bool _internal_arg4() const;
  void _internal_set_arg4(bool value);
  public:

  // @@protoc_insertion_point(class_scope:yyb.RpcServiceExampleRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > arg5_;
  mutable std::atomic<int> _arg5_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr arg3_;
  ::PROTOBUF_NAMESPACE_ID::int32 arg1_;
  float arg2_;
  bool arg4_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RpcServiceExampleReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yyb.RpcServiceExampleReply) */ {
 public:
  RpcServiceExampleReply();
  virtual ~RpcServiceExampleReply();

  RpcServiceExampleReply(const RpcServiceExampleReply& from);
  RpcServiceExampleReply(RpcServiceExampleReply&& from) noexcept
    : RpcServiceExampleReply() {
    *this = ::std::move(from);
  }

  inline RpcServiceExampleReply& operator=(const RpcServiceExampleReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcServiceExampleReply& operator=(RpcServiceExampleReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RpcServiceExampleReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcServiceExampleReply* internal_default_instance() {
    return reinterpret_cast<const RpcServiceExampleReply*>(
               &_RpcServiceExampleReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RpcServiceExampleReply& a, RpcServiceExampleReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcServiceExampleReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RpcServiceExampleReply* New() const final {
    return CreateMaybeMessage<RpcServiceExampleReply>(nullptr);
  }

  RpcServiceExampleReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RpcServiceExampleReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RpcServiceExampleReply& from);
  void MergeFrom(const RpcServiceExampleReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcServiceExampleReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yyb.RpcServiceExampleReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fservice_2eproto);
    return ::descriptor_table_rpc_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // string error = 1;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:yyb.RpcServiceExampleReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LoginRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yyb.LoginRequest) */ {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return CreateMaybeMessage<LoginRequest>(nullptr);
  }

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yyb.LoginRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fservice_2eproto);
    return ::descriptor_table_rpc_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSerialKeyFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string serial_key = 2;
  void clear_serial_key();
  const std::string& serial_key() const;
  void set_serial_key(const std::string& value);
  void set_serial_key(std::string&& value);
  void set_serial_key(const char* value);
  void set_serial_key(const char* value, size_t size);
  std::string* mutable_serial_key();
  std::string* release_serial_key();
  void set_allocated_serial_key(std::string* serial_key);
  private:
  const std::string& _internal_serial_key() const;
  void _internal_set_serial_key(const std::string& value);
  std::string* _internal_mutable_serial_key();
  public:

  // @@protoc_insertion_point(class_scope:yyb.LoginRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LoginReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yyb.LoginReply) */ {
 public:
  LoginReply();
  virtual ~LoginReply();

  LoginReply(const LoginReply& from);
  LoginReply(LoginReply&& from) noexcept
    : LoginReply() {
    *this = ::std::move(from);
  }

  inline LoginReply& operator=(const LoginReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReply& operator=(LoginReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginReply* internal_default_instance() {
    return reinterpret_cast<const LoginReply*>(
               &_LoginReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LoginReply& a, LoginReply& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginReply* New() const final {
    return CreateMaybeMessage<LoginReply>(nullptr);
  }

  LoginReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginReply& from);
  void MergeFrom(const LoginReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yyb.LoginReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fservice_2eproto);
    return ::descriptor_table_rpc_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // string error = 1;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:yyb.LoginReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RpcServiceExampleRequest

// int32 arg1 = 1;
inline void RpcServiceExampleRequest::clear_arg1() {
  arg1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RpcServiceExampleRequest::_internal_arg1() const {
  return arg1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RpcServiceExampleRequest::arg1() const {
  // @@protoc_insertion_point(field_get:yyb.RpcServiceExampleRequest.arg1)
  return _internal_arg1();
}
inline void RpcServiceExampleRequest::_internal_set_arg1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  arg1_ = value;
}
inline void RpcServiceExampleRequest::set_arg1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_arg1(value);
  // @@protoc_insertion_point(field_set:yyb.RpcServiceExampleRequest.arg1)
}

// float arg2 = 2;
inline void RpcServiceExampleRequest::clear_arg2() {
  arg2_ = 0;
}
inline float RpcServiceExampleRequest::_internal_arg2() const {
  return arg2_;
}
inline float RpcServiceExampleRequest::arg2() const {
  // @@protoc_insertion_point(field_get:yyb.RpcServiceExampleRequest.arg2)
  return _internal_arg2();
}
inline void RpcServiceExampleRequest::_internal_set_arg2(float value) {
  
  arg2_ = value;
}
inline void RpcServiceExampleRequest::set_arg2(float value) {
  _internal_set_arg2(value);
  // @@protoc_insertion_point(field_set:yyb.RpcServiceExampleRequest.arg2)
}

// string arg3 = 3;
inline void RpcServiceExampleRequest::clear_arg3() {
  arg3_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RpcServiceExampleRequest::arg3() const {
  // @@protoc_insertion_point(field_get:yyb.RpcServiceExampleRequest.arg3)
  return _internal_arg3();
}
inline void RpcServiceExampleRequest::set_arg3(const std::string& value) {
  _internal_set_arg3(value);
  // @@protoc_insertion_point(field_set:yyb.RpcServiceExampleRequest.arg3)
}
inline std::string* RpcServiceExampleRequest::mutable_arg3() {
  // @@protoc_insertion_point(field_mutable:yyb.RpcServiceExampleRequest.arg3)
  return _internal_mutable_arg3();
}
inline const std::string& RpcServiceExampleRequest::_internal_arg3() const {
  return arg3_.GetNoArena();
}
inline void RpcServiceExampleRequest::_internal_set_arg3(const std::string& value) {
  
  arg3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RpcServiceExampleRequest::set_arg3(std::string&& value) {
  
  arg3_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yyb.RpcServiceExampleRequest.arg3)
}
inline void RpcServiceExampleRequest::set_arg3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  arg3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yyb.RpcServiceExampleRequest.arg3)
}
inline void RpcServiceExampleRequest::set_arg3(const char* value, size_t size) {
  
  arg3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yyb.RpcServiceExampleRequest.arg3)
}
inline std::string* RpcServiceExampleRequest::_internal_mutable_arg3() {
  
  return arg3_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RpcServiceExampleRequest::release_arg3() {
  // @@protoc_insertion_point(field_release:yyb.RpcServiceExampleRequest.arg3)
  
  return arg3_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RpcServiceExampleRequest::set_allocated_arg3(std::string* arg3) {
  if (arg3 != nullptr) {
    
  } else {
    
  }
  arg3_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), arg3);
  // @@protoc_insertion_point(field_set_allocated:yyb.RpcServiceExampleRequest.arg3)
}

// bool arg4 = 4;
inline void RpcServiceExampleRequest::clear_arg4() {
  arg4_ = false;
}
inline bool RpcServiceExampleRequest::_internal_arg4() const {
  return arg4_;
}
inline bool RpcServiceExampleRequest::arg4() const {
  // @@protoc_insertion_point(field_get:yyb.RpcServiceExampleRequest.arg4)
  return _internal_arg4();
}
inline void RpcServiceExampleRequest::_internal_set_arg4(bool value) {
  
  arg4_ = value;
}
inline void RpcServiceExampleRequest::set_arg4(bool value) {
  _internal_set_arg4(value);
  // @@protoc_insertion_point(field_set:yyb.RpcServiceExampleRequest.arg4)
}

// repeated int32 arg5 = 5;
inline int RpcServiceExampleRequest::_internal_arg5_size() const {
  return arg5_.size();
}
inline int RpcServiceExampleRequest::arg5_size() const {
  return _internal_arg5_size();
}
inline void RpcServiceExampleRequest::clear_arg5() {
  arg5_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RpcServiceExampleRequest::_internal_arg5(int index) const {
  return arg5_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RpcServiceExampleRequest::arg5(int index) const {
  // @@protoc_insertion_point(field_get:yyb.RpcServiceExampleRequest.arg5)
  return _internal_arg5(index);
}
inline void RpcServiceExampleRequest::set_arg5(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  arg5_.Set(index, value);
  // @@protoc_insertion_point(field_set:yyb.RpcServiceExampleRequest.arg5)
}
inline void RpcServiceExampleRequest::_internal_add_arg5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  arg5_.Add(value);
}
inline void RpcServiceExampleRequest::add_arg5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_arg5(value);
  // @@protoc_insertion_point(field_add:yyb.RpcServiceExampleRequest.arg5)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RpcServiceExampleRequest::_internal_arg5() const {
  return arg5_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RpcServiceExampleRequest::arg5() const {
  // @@protoc_insertion_point(field_list:yyb.RpcServiceExampleRequest.arg5)
  return _internal_arg5();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RpcServiceExampleRequest::_internal_mutable_arg5() {
  return &arg5_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RpcServiceExampleRequest::mutable_arg5() {
  // @@protoc_insertion_point(field_mutable_list:yyb.RpcServiceExampleRequest.arg5)
  return _internal_mutable_arg5();
}

// -------------------------------------------------------------------

// RpcServiceExampleReply

// string error = 1;
inline void RpcServiceExampleReply::clear_error() {
  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RpcServiceExampleReply::error() const {
  // @@protoc_insertion_point(field_get:yyb.RpcServiceExampleReply.error)
  return _internal_error();
}
inline void RpcServiceExampleReply::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:yyb.RpcServiceExampleReply.error)
}
inline std::string* RpcServiceExampleReply::mutable_error() {
  // @@protoc_insertion_point(field_mutable:yyb.RpcServiceExampleReply.error)
  return _internal_mutable_error();
}
inline const std::string& RpcServiceExampleReply::_internal_error() const {
  return error_.GetNoArena();
}
inline void RpcServiceExampleReply::_internal_set_error(const std::string& value) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RpcServiceExampleReply::set_error(std::string&& value) {
  
  error_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yyb.RpcServiceExampleReply.error)
}
inline void RpcServiceExampleReply::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yyb.RpcServiceExampleReply.error)
}
inline void RpcServiceExampleReply::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yyb.RpcServiceExampleReply.error)
}
inline std::string* RpcServiceExampleReply::_internal_mutable_error() {
  
  return error_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RpcServiceExampleReply::release_error() {
  // @@protoc_insertion_point(field_release:yyb.RpcServiceExampleReply.error)
  
  return error_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RpcServiceExampleReply::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:yyb.RpcServiceExampleReply.error)
}

// -------------------------------------------------------------------

// LoginRequest

// string name = 1;
inline void LoginRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRequest::name() const {
  // @@protoc_insertion_point(field_get:yyb.LoginRequest.name)
  return _internal_name();
}
inline void LoginRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:yyb.LoginRequest.name)
}
inline std::string* LoginRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:yyb.LoginRequest.name)
  return _internal_mutable_name();
}
inline const std::string& LoginRequest::_internal_name() const {
  return name_.GetNoArena();
}
inline void LoginRequest::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginRequest::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yyb.LoginRequest.name)
}
inline void LoginRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yyb.LoginRequest.name)
}
inline void LoginRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yyb.LoginRequest.name)
}
inline std::string* LoginRequest::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRequest::release_name() {
  // @@protoc_insertion_point(field_release:yyb.LoginRequest.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:yyb.LoginRequest.name)
}

// string serial_key = 2;
inline void LoginRequest::clear_serial_key() {
  serial_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRequest::serial_key() const {
  // @@protoc_insertion_point(field_get:yyb.LoginRequest.serial_key)
  return _internal_serial_key();
}
inline void LoginRequest::set_serial_key(const std::string& value) {
  _internal_set_serial_key(value);
  // @@protoc_insertion_point(field_set:yyb.LoginRequest.serial_key)
}
inline std::string* LoginRequest::mutable_serial_key() {
  // @@protoc_insertion_point(field_mutable:yyb.LoginRequest.serial_key)
  return _internal_mutable_serial_key();
}
inline const std::string& LoginRequest::_internal_serial_key() const {
  return serial_key_.GetNoArena();
}
inline void LoginRequest::_internal_set_serial_key(const std::string& value) {
  
  serial_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginRequest::set_serial_key(std::string&& value) {
  
  serial_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yyb.LoginRequest.serial_key)
}
inline void LoginRequest::set_serial_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serial_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yyb.LoginRequest.serial_key)
}
inline void LoginRequest::set_serial_key(const char* value, size_t size) {
  
  serial_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yyb.LoginRequest.serial_key)
}
inline std::string* LoginRequest::_internal_mutable_serial_key() {
  
  return serial_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRequest::release_serial_key() {
  // @@protoc_insertion_point(field_release:yyb.LoginRequest.serial_key)
  
  return serial_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_serial_key(std::string* serial_key) {
  if (serial_key != nullptr) {
    
  } else {
    
  }
  serial_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial_key);
  // @@protoc_insertion_point(field_set_allocated:yyb.LoginRequest.serial_key)
}

// -------------------------------------------------------------------

// LoginReply

// string error = 1;
inline void LoginReply::clear_error() {
  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginReply::error() const {
  // @@protoc_insertion_point(field_get:yyb.LoginReply.error)
  return _internal_error();
}
inline void LoginReply::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:yyb.LoginReply.error)
}
inline std::string* LoginReply::mutable_error() {
  // @@protoc_insertion_point(field_mutable:yyb.LoginReply.error)
  return _internal_mutable_error();
}
inline const std::string& LoginReply::_internal_error() const {
  return error_.GetNoArena();
}
inline void LoginReply::_internal_set_error(const std::string& value) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginReply::set_error(std::string&& value) {
  
  error_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yyb.LoginReply.error)
}
inline void LoginReply::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yyb.LoginReply.error)
}
inline void LoginReply::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yyb.LoginReply.error)
}
inline std::string* LoginReply::_internal_mutable_error() {
  
  return error_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginReply::release_error() {
  // @@protoc_insertion_point(field_release:yyb.LoginReply.error)
  
  return error_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReply::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:yyb.LoginReply.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace yyb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpc_5fservice_2eproto
