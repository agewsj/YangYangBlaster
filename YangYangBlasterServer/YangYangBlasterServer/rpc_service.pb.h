// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpc_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpc_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_5fservice_2eproto;
namespace yyb {
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class GameDataReply;
class GameDataReplyDefaultTypeInternal;
extern GameDataReplyDefaultTypeInternal _GameDataReply_default_instance_;
class GameDataRequest;
class GameDataRequestDefaultTypeInternal;
extern GameDataRequestDefaultTypeInternal _GameDataRequest_default_instance_;
class Item;
class ItemDefaultTypeInternal;
extern ItemDefaultTypeInternal _Item_default_instance_;
class LoginReply;
class LoginReplyDefaultTypeInternal;
extern LoginReplyDefaultTypeInternal _LoginReply_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class Mercenary;
class MercenaryDefaultTypeInternal;
extern MercenaryDefaultTypeInternal _Mercenary_default_instance_;
class PushNotification;
class PushNotificationDefaultTypeInternal;
extern PushNotificationDefaultTypeInternal _PushNotification_default_instance_;
class RankingListReply;
class RankingListReplyDefaultTypeInternal;
extern RankingListReplyDefaultTypeInternal _RankingListReply_default_instance_;
class RankingListReply_Ranking;
class RankingListReply_RankingDefaultTypeInternal;
extern RankingListReply_RankingDefaultTypeInternal _RankingListReply_Ranking_default_instance_;
class RankingListRequest;
class RankingListRequestDefaultTypeInternal;
extern RankingListRequestDefaultTypeInternal _RankingListRequest_default_instance_;
class RankingReply;
class RankingReplyDefaultTypeInternal;
extern RankingReplyDefaultTypeInternal _RankingReply_default_instance_;
class RankingRequest;
class RankingRequestDefaultTypeInternal;
extern RankingRequestDefaultTypeInternal _RankingRequest_default_instance_;
class RpcServiceExampleReply;
class RpcServiceExampleReplyDefaultTypeInternal;
extern RpcServiceExampleReplyDefaultTypeInternal _RpcServiceExampleReply_default_instance_;
class RpcServiceExampleRequest;
class RpcServiceExampleRequestDefaultTypeInternal;
extern RpcServiceExampleRequestDefaultTypeInternal _RpcServiceExampleRequest_default_instance_;
class Stage;
class StageDefaultTypeInternal;
extern StageDefaultTypeInternal _Stage_default_instance_;
class UpgradePlayer;
class UpgradePlayerDefaultTypeInternal;
extern UpgradePlayerDefaultTypeInternal _UpgradePlayer_default_instance_;
}  // namespace yyb
PROTOBUF_NAMESPACE_OPEN
template<> ::yyb::Empty* Arena::CreateMaybeMessage<::yyb::Empty>(Arena*);
template<> ::yyb::GameDataReply* Arena::CreateMaybeMessage<::yyb::GameDataReply>(Arena*);
template<> ::yyb::GameDataRequest* Arena::CreateMaybeMessage<::yyb::GameDataRequest>(Arena*);
template<> ::yyb::Item* Arena::CreateMaybeMessage<::yyb::Item>(Arena*);
template<> ::yyb::LoginReply* Arena::CreateMaybeMessage<::yyb::LoginReply>(Arena*);
template<> ::yyb::LoginRequest* Arena::CreateMaybeMessage<::yyb::LoginRequest>(Arena*);
template<> ::yyb::Mercenary* Arena::CreateMaybeMessage<::yyb::Mercenary>(Arena*);
template<> ::yyb::PushNotification* Arena::CreateMaybeMessage<::yyb::PushNotification>(Arena*);
template<> ::yyb::RankingListReply* Arena::CreateMaybeMessage<::yyb::RankingListReply>(Arena*);
template<> ::yyb::RankingListReply_Ranking* Arena::CreateMaybeMessage<::yyb::RankingListReply_Ranking>(Arena*);
template<> ::yyb::RankingListRequest* Arena::CreateMaybeMessage<::yyb::RankingListRequest>(Arena*);
template<> ::yyb::RankingReply* Arena::CreateMaybeMessage<::yyb::RankingReply>(Arena*);
template<> ::yyb::RankingRequest* Arena::CreateMaybeMessage<::yyb::RankingRequest>(Arena*);
template<> ::yyb::RpcServiceExampleReply* Arena::CreateMaybeMessage<::yyb::RpcServiceExampleReply>(Arena*);
template<> ::yyb::RpcServiceExampleRequest* Arena::CreateMaybeMessage<::yyb::RpcServiceExampleRequest>(Arena*);
template<> ::yyb::Stage* Arena::CreateMaybeMessage<::yyb::Stage>(Arena*);
template<> ::yyb::UpgradePlayer* Arena::CreateMaybeMessage<::yyb::UpgradePlayer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace yyb {

enum LoginRequest_LOGIN_TYPE : int {
  LoginRequest_LOGIN_TYPE_LOGIN_TYPE_NON_CERT = 0,
  LoginRequest_LOGIN_TYPE_LOGIN_TYPE_GOOGLE = 1,
  LoginRequest_LOGIN_TYPE_LOGIN_TYPE_FACEBOOK = 2,
  LoginRequest_LOGIN_TYPE_LoginRequest_LOGIN_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LoginRequest_LOGIN_TYPE_LoginRequest_LOGIN_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LoginRequest_LOGIN_TYPE_IsValid(int value);
constexpr LoginRequest_LOGIN_TYPE LoginRequest_LOGIN_TYPE_LOGIN_TYPE_MIN = LoginRequest_LOGIN_TYPE_LOGIN_TYPE_NON_CERT;
constexpr LoginRequest_LOGIN_TYPE LoginRequest_LOGIN_TYPE_LOGIN_TYPE_MAX = LoginRequest_LOGIN_TYPE_LOGIN_TYPE_FACEBOOK;
constexpr int LoginRequest_LOGIN_TYPE_LOGIN_TYPE_ARRAYSIZE = LoginRequest_LOGIN_TYPE_LOGIN_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginRequest_LOGIN_TYPE_descriptor();
template<typename T>
inline const std::string& LoginRequest_LOGIN_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginRequest_LOGIN_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginRequest_LOGIN_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginRequest_LOGIN_TYPE_descriptor(), enum_t_value);
}
inline bool LoginRequest_LOGIN_TYPE_Parse(
    const std::string& name, LoginRequest_LOGIN_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginRequest_LOGIN_TYPE>(
    LoginRequest_LOGIN_TYPE_descriptor(), name, value);
}
enum ERROR_CODE : int {
  ERROR_CODE_OK = 0,
  ERROR_CODE_EMPTY_NICKNAME = 1,
  ERROR_CODE_DUP_NICKNAME = 2,
  ERROR_CODE_NICKNAME_HAVE_SPECIAL_CHARACTERS = 3,
  ERROR_CODE_UNABLE_TO_CREATE_USER = 4,
  ERROR_CODE_FAILED_TO_GET_USER = 5,
  ERROR_CODE_GOOGLE_AUTH_FAILED = 6,
  ERROR_CODE_EMPTY_ID_TOKEN = 7,
  ERROR_CODE_FAILED_TO_UPDATE_LOGIN_KEY = 8,
  ERROR_CODE_FAILED_TO_CHANGE_LOGIN_TYPE = 9,
  ERROR_CODE_LOGIN_TYPE_IS_DIFFERENT = 10,
  ERROR_CODE_ACCESS_KEY_HAS_EXPIRED = 11,
  ERROR_CODE_SYSTME = 12,
  ERROR_CODE_FAILED_TO_SAVE_ITEM = 13,
  ERROR_CODE_FAILED_TO_SAVE_MERCENARY = 14,
  ERROR_CODE_FAILED_TO_SAVE_STAGE = 15,
  ERROR_CODE_FAILED_TO_SAVE_UPGRADE_PLAYER = 16,
  ERROR_CODE_FAILED_TO_LOAD_ITEM = 17,
  ERROR_CODE_FAILED_TO_LOAD_MERCENARY = 18,
  ERROR_CODE_FAILED_TO_LOAD_STAGE = 19,
  ERROR_CODE_FAILED_TO_LOAD_UPGRADE_PLAYER = 20,
  ERROR_CODE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ERROR_CODE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ERROR_CODE_IsValid(int value);
constexpr ERROR_CODE ERROR_CODE_MIN = ERROR_CODE_OK;
constexpr ERROR_CODE ERROR_CODE_MAX = ERROR_CODE_FAILED_TO_LOAD_UPGRADE_PLAYER;
constexpr int ERROR_CODE_ARRAYSIZE = ERROR_CODE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ERROR_CODE_descriptor();
template<typename T>
inline const std::string& ERROR_CODE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ERROR_CODE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ERROR_CODE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ERROR_CODE_descriptor(), enum_t_value);
}
inline bool ERROR_CODE_Parse(
    const std::string& name, ERROR_CODE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ERROR_CODE>(
    ERROR_CODE_descriptor(), name, value);
}
enum ITEM_TYPE : int {
  ITEM_TYPE_NONE = 0,
  ITEM_TYPE_GOLD = 1000,
  ITEM_TYPE_RUBY = 1001,
  ITEM_TYPE_PIECE_KNIGHT = 1002,
  ITEM_TYPE_PIECE_PIRATE = 1003,
  ITEM_TYPE_PIECE_STAR = 1004,
  ITEM_TYPE_PIECE_SCIENTIST = 1005,
  ITEM_TYPE_PIECE_STUDENT = 1006,
  ITEM_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ITEM_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ITEM_TYPE_IsValid(int value);
constexpr ITEM_TYPE ITEM_TYPE_MIN = ITEM_TYPE_NONE;
constexpr ITEM_TYPE ITEM_TYPE_MAX = ITEM_TYPE_PIECE_STUDENT;
constexpr int ITEM_TYPE_ARRAYSIZE = ITEM_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ITEM_TYPE_descriptor();
template<typename T>
inline const std::string& ITEM_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ITEM_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ITEM_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ITEM_TYPE_descriptor(), enum_t_value);
}
inline bool ITEM_TYPE_Parse(
    const std::string& name, ITEM_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ITEM_TYPE>(
    ITEM_TYPE_descriptor(), name, value);
}
enum ITEM_CATEGORY : int {
  ITEM_CATEGORY_NORMAL = 0,
  ITEM_CATEGORY_CURRENCY = 1,
  ITEM_CATEGORY_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ITEM_CATEGORY_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ITEM_CATEGORY_IsValid(int value);
constexpr ITEM_CATEGORY ITEM_CATEGORY_MIN = ITEM_CATEGORY_NORMAL;
constexpr ITEM_CATEGORY ITEM_CATEGORY_MAX = ITEM_CATEGORY_CURRENCY;
constexpr int ITEM_CATEGORY_ARRAYSIZE = ITEM_CATEGORY_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ITEM_CATEGORY_descriptor();
template<typename T>
inline const std::string& ITEM_CATEGORY_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ITEM_CATEGORY>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ITEM_CATEGORY_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ITEM_CATEGORY_descriptor(), enum_t_value);
}
inline bool ITEM_CATEGORY_Parse(
    const std::string& name, ITEM_CATEGORY* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ITEM_CATEGORY>(
    ITEM_CATEGORY_descriptor(), name, value);
}
// ===================================================================

class RpcServiceExampleRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yyb.RpcServiceExampleRequest) */ {
 public:
  RpcServiceExampleRequest();
  virtual ~RpcServiceExampleRequest();

  RpcServiceExampleRequest(const RpcServiceExampleRequest& from);
  RpcServiceExampleRequest(RpcServiceExampleRequest&& from) noexcept
    : RpcServiceExampleRequest() {
    *this = ::std::move(from);
  }

  inline RpcServiceExampleRequest& operator=(const RpcServiceExampleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcServiceExampleRequest& operator=(RpcServiceExampleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RpcServiceExampleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcServiceExampleRequest* internal_default_instance() {
    return reinterpret_cast<const RpcServiceExampleRequest*>(
               &_RpcServiceExampleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RpcServiceExampleRequest& a, RpcServiceExampleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcServiceExampleRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RpcServiceExampleRequest* New() const final {
    return CreateMaybeMessage<RpcServiceExampleRequest>(nullptr);
  }

  RpcServiceExampleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RpcServiceExampleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RpcServiceExampleRequest& from);
  void MergeFrom(const RpcServiceExampleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcServiceExampleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yyb.RpcServiceExampleRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fservice_2eproto);
    return ::descriptor_table_rpc_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArg5FieldNumber = 5,
    kArg3FieldNumber = 3,
    kArg1FieldNumber = 1,
    kArg2FieldNumber = 2,
    kArg4FieldNumber = 4,
  };
  // repeated int32 arg5 = 5;
  int arg5_size() const;
  private:
  int _internal_arg5_size() const;
  public:
  void clear_arg5();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_arg5(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_arg5() const;
  void _internal_add_arg5(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_arg5();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 arg5(int index) const;
  void set_arg5(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_arg5(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      arg5() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_arg5();

  // string arg3 = 3;
  void clear_arg3();
  const std::string& arg3() const;
  void set_arg3(const std::string& value);
  void set_arg3(std::string&& value);
  void set_arg3(const char* value);
  void set_arg3(const char* value, size_t size);
  std::string* mutable_arg3();
  std::string* release_arg3();
  void set_allocated_arg3(std::string* arg3);
  private:
  const std::string& _internal_arg3() const;
  void _internal_set_arg3(const std::string& value);
  std::string* _internal_mutable_arg3();
  public:

  // int32 arg1 = 1;
  void clear_arg1();
  ::PROTOBUF_NAMESPACE_ID::int32 arg1() const;
  void set_arg1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_arg1() const;
  void _internal_set_arg1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float arg2 = 2;
  void clear_arg2();
  float arg2() const;
  void set_arg2(float value);
  private:
  float _internal_arg2() const;
  void _internal_set_arg2(float value);
  public:

  // bool arg4 = 4;
  void clear_arg4();
  bool arg4() const;
  void set_arg4(bool value);
  private:
  bool _internal_arg4() const;
  void _internal_set_arg4(bool value);
  public:

  // @@protoc_insertion_point(class_scope:yyb.RpcServiceExampleRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > arg5_;
  mutable std::atomic<int> _arg5_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr arg3_;
  ::PROTOBUF_NAMESPACE_ID::int32 arg1_;
  float arg2_;
  bool arg4_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RpcServiceExampleReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yyb.RpcServiceExampleReply) */ {
 public:
  RpcServiceExampleReply();
  virtual ~RpcServiceExampleReply();

  RpcServiceExampleReply(const RpcServiceExampleReply& from);
  RpcServiceExampleReply(RpcServiceExampleReply&& from) noexcept
    : RpcServiceExampleReply() {
    *this = ::std::move(from);
  }

  inline RpcServiceExampleReply& operator=(const RpcServiceExampleReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcServiceExampleReply& operator=(RpcServiceExampleReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RpcServiceExampleReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcServiceExampleReply* internal_default_instance() {
    return reinterpret_cast<const RpcServiceExampleReply*>(
               &_RpcServiceExampleReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RpcServiceExampleReply& a, RpcServiceExampleReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcServiceExampleReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RpcServiceExampleReply* New() const final {
    return CreateMaybeMessage<RpcServiceExampleReply>(nullptr);
  }

  RpcServiceExampleReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RpcServiceExampleReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RpcServiceExampleReply& from);
  void MergeFrom(const RpcServiceExampleReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcServiceExampleReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yyb.RpcServiceExampleReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fservice_2eproto);
    return ::descriptor_table_rpc_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // .yyb.ERROR_CODE error = 1;
  void clear_error();
  ::yyb::ERROR_CODE error() const;
  void set_error(::yyb::ERROR_CODE value);
  private:
  ::yyb::ERROR_CODE _internal_error() const;
  void _internal_set_error(::yyb::ERROR_CODE value);
  public:

  // @@protoc_insertion_point(class_scope:yyb.RpcServiceExampleReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Empty :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yyb.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yyb.Empty";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fservice_2eproto);
    return ::descriptor_table_rpc_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:yyb.Empty)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PushNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yyb.PushNotification) */ {
 public:
  PushNotification();
  virtual ~PushNotification();

  PushNotification(const PushNotification& from);
  PushNotification(PushNotification&& from) noexcept
    : PushNotification() {
    *this = ::std::move(from);
  }

  inline PushNotification& operator=(const PushNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushNotification& operator=(PushNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PushNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PushNotification* internal_default_instance() {
    return reinterpret_cast<const PushNotification*>(
               &_PushNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PushNotification& a, PushNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(PushNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PushNotification* New() const final {
    return CreateMaybeMessage<PushNotification>(nullptr);
  }

  PushNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PushNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PushNotification& from);
  void MergeFrom(const PushNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yyb.PushNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fservice_2eproto);
    return ::descriptor_table_rpc_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 1,
  };
  // string payload = 1;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const char* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:yyb.PushNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LoginRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yyb.LoginRequest) */ {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return CreateMaybeMessage<LoginRequest>(nullptr);
  }

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yyb.LoginRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fservice_2eproto);
    return ::descriptor_table_rpc_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LoginRequest_LOGIN_TYPE LOGIN_TYPE;
  static constexpr LOGIN_TYPE LOGIN_TYPE_NON_CERT =
    LoginRequest_LOGIN_TYPE_LOGIN_TYPE_NON_CERT;
  static constexpr LOGIN_TYPE LOGIN_TYPE_GOOGLE =
    LoginRequest_LOGIN_TYPE_LOGIN_TYPE_GOOGLE;
  static constexpr LOGIN_TYPE LOGIN_TYPE_FACEBOOK =
    LoginRequest_LOGIN_TYPE_LOGIN_TYPE_FACEBOOK;
  static inline bool LOGIN_TYPE_IsValid(int value) {
    return LoginRequest_LOGIN_TYPE_IsValid(value);
  }
  static constexpr LOGIN_TYPE LOGIN_TYPE_MIN =
    LoginRequest_LOGIN_TYPE_LOGIN_TYPE_MIN;
  static constexpr LOGIN_TYPE LOGIN_TYPE_MAX =
    LoginRequest_LOGIN_TYPE_LOGIN_TYPE_MAX;
  static constexpr int LOGIN_TYPE_ARRAYSIZE =
    LoginRequest_LOGIN_TYPE_LOGIN_TYPE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LOGIN_TYPE_descriptor() {
    return LoginRequest_LOGIN_TYPE_descriptor();
  }
  template<typename T>
  static inline const std::string& LOGIN_TYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LOGIN_TYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LOGIN_TYPE_Name.");
    return LoginRequest_LOGIN_TYPE_Name(enum_t_value);
  }
  static inline bool LOGIN_TYPE_Parse(const std::string& name,
      LOGIN_TYPE* value) {
    return LoginRequest_LOGIN_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLoginKeyFieldNumber = 2,
    kIdTokenFieldNumber = 3,
    kNickNameFieldNumber = 4,
    kLoginTypeFieldNumber = 1,
  };
  // string loginKey = 2;
  void clear_loginkey();
  const std::string& loginkey() const;
  void set_loginkey(const std::string& value);
  void set_loginkey(std::string&& value);
  void set_loginkey(const char* value);
  void set_loginkey(const char* value, size_t size);
  std::string* mutable_loginkey();
  std::string* release_loginkey();
  void set_allocated_loginkey(std::string* loginkey);
  private:
  const std::string& _internal_loginkey() const;
  void _internal_set_loginkey(const std::string& value);
  std::string* _internal_mutable_loginkey();
  public:

  // string idToken = 3;
  void clear_idtoken();
  const std::string& idtoken() const;
  void set_idtoken(const std::string& value);
  void set_idtoken(std::string&& value);
  void set_idtoken(const char* value);
  void set_idtoken(const char* value, size_t size);
  std::string* mutable_idtoken();
  std::string* release_idtoken();
  void set_allocated_idtoken(std::string* idtoken);
  private:
  const std::string& _internal_idtoken() const;
  void _internal_set_idtoken(const std::string& value);
  std::string* _internal_mutable_idtoken();
  public:

  // string nickName = 4;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // .yyb.LoginRequest.LOGIN_TYPE loginType = 1;
  void clear_logintype();
  ::yyb::LoginRequest_LOGIN_TYPE logintype() const;
  void set_logintype(::yyb::LoginRequest_LOGIN_TYPE value);
  private:
  ::yyb::LoginRequest_LOGIN_TYPE _internal_logintype() const;
  void _internal_set_logintype(::yyb::LoginRequest_LOGIN_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:yyb.LoginRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loginkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idtoken_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  int logintype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LoginReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yyb.LoginReply) */ {
 public:
  LoginReply();
  virtual ~LoginReply();

  LoginReply(const LoginReply& from);
  LoginReply(LoginReply&& from) noexcept
    : LoginReply() {
    *this = ::std::move(from);
  }

  inline LoginReply& operator=(const LoginReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReply& operator=(LoginReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginReply* internal_default_instance() {
    return reinterpret_cast<const LoginReply*>(
               &_LoginReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LoginReply& a, LoginReply& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginReply* New() const final {
    return CreateMaybeMessage<LoginReply>(nullptr);
  }

  LoginReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginReply& from);
  void MergeFrom(const LoginReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yyb.LoginReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fservice_2eproto);
    return ::descriptor_table_rpc_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickNameFieldNumber = 3,
    kLoginKeyFieldNumber = 4,
    kAccessKeyFieldNumber = 5,
    kErrorFieldNumber = 1,
    kUsnFieldNumber = 2,
  };
  // string nickName = 3;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string loginKey = 4;
  void clear_loginkey();
  const std::string& loginkey() const;
  void set_loginkey(const std::string& value);
  void set_loginkey(std::string&& value);
  void set_loginkey(const char* value);
  void set_loginkey(const char* value, size_t size);
  std::string* mutable_loginkey();
  std::string* release_loginkey();
  void set_allocated_loginkey(std::string* loginkey);
  private:
  const std::string& _internal_loginkey() const;
  void _internal_set_loginkey(const std::string& value);
  std::string* _internal_mutable_loginkey();
  public:

  // string accessKey = 5;
  void clear_accesskey();
  const std::string& accesskey() const;
  void set_accesskey(const std::string& value);
  void set_accesskey(std::string&& value);
  void set_accesskey(const char* value);
  void set_accesskey(const char* value, size_t size);
  std::string* mutable_accesskey();
  std::string* release_accesskey();
  void set_allocated_accesskey(std::string* accesskey);
  private:
  const std::string& _internal_accesskey() const;
  void _internal_set_accesskey(const std::string& value);
  std::string* _internal_mutable_accesskey();
  public:

  // .yyb.ERROR_CODE error = 1;
  void clear_error();
  ::yyb::ERROR_CODE error() const;
  void set_error(::yyb::ERROR_CODE value);
  private:
  ::yyb::ERROR_CODE _internal_error() const;
  void _internal_set_error(::yyb::ERROR_CODE value);
  public:

  // int32 usn = 2;
  void clear_usn();
  ::PROTOBUF_NAMESPACE_ID::int32 usn() const;
  void set_usn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_usn() const;
  void _internal_set_usn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:yyb.LoginReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loginkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesskey_;
  int error_;
  ::PROTOBUF_NAMESPACE_ID::int32 usn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Item :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yyb.Item) */ {
 public:
  Item();
  virtual ~Item();

  Item(const Item& from);
  Item(Item&& from) noexcept
    : Item() {
    *this = ::std::move(from);
  }

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline Item& operator=(Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Item* internal_default_instance() {
    return reinterpret_cast<const Item*>(
               &_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Item& a, Item& b) {
    a.Swap(&b);
  }
  inline void Swap(Item* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Item* New() const final {
    return CreateMaybeMessage<Item>(nullptr);
  }

  Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Item>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Item& from);
  void MergeFrom(const Item& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Item* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yyb.Item";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fservice_2eproto);
    return ::descriptor_table_rpc_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemNameFieldNumber = 1,
    kItemTypeFieldNumber = 2,
    kItemCategoryFieldNumber = 3,
    kItemCountFieldNumber = 4,
  };
  // string itemName = 1;
  void clear_itemname();
  const std::string& itemname() const;
  void set_itemname(const std::string& value);
  void set_itemname(std::string&& value);
  void set_itemname(const char* value);
  void set_itemname(const char* value, size_t size);
  std::string* mutable_itemname();
  std::string* release_itemname();
  void set_allocated_itemname(std::string* itemname);
  private:
  const std::string& _internal_itemname() const;
  void _internal_set_itemname(const std::string& value);
  std::string* _internal_mutable_itemname();
  public:

  // .yyb.ITEM_TYPE itemType = 2;
  void clear_itemtype();
  ::yyb::ITEM_TYPE itemtype() const;
  void set_itemtype(::yyb::ITEM_TYPE value);
  private:
  ::yyb::ITEM_TYPE _internal_itemtype() const;
  void _internal_set_itemtype(::yyb::ITEM_TYPE value);
  public:

  // .yyb.ITEM_CATEGORY itemCategory = 3;
  void clear_itemcategory();
  ::yyb::ITEM_CATEGORY itemcategory() const;
  void set_itemcategory(::yyb::ITEM_CATEGORY value);
  private:
  ::yyb::ITEM_CATEGORY _internal_itemcategory() const;
  void _internal_set_itemcategory(::yyb::ITEM_CATEGORY value);
  public:

  // int32 itemCount = 4;
  void clear_itemcount();
  ::PROTOBUF_NAMESPACE_ID::int32 itemcount() const;
  void set_itemcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_itemcount() const;
  void _internal_set_itemcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:yyb.Item)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr itemname_;
  int itemtype_;
  int itemcategory_;
  ::PROTOBUF_NAMESPACE_ID::int32 itemcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Mercenary :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yyb.Mercenary) */ {
 public:
  Mercenary();
  virtual ~Mercenary();

  Mercenary(const Mercenary& from);
  Mercenary(Mercenary&& from) noexcept
    : Mercenary() {
    *this = ::std::move(from);
  }

  inline Mercenary& operator=(const Mercenary& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mercenary& operator=(Mercenary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mercenary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mercenary* internal_default_instance() {
    return reinterpret_cast<const Mercenary*>(
               &_Mercenary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Mercenary& a, Mercenary& b) {
    a.Swap(&b);
  }
  inline void Swap(Mercenary* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mercenary* New() const final {
    return CreateMaybeMessage<Mercenary>(nullptr);
  }

  Mercenary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mercenary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mercenary& from);
  void MergeFrom(const Mercenary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mercenary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yyb.Mercenary";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fservice_2eproto);
    return ::descriptor_table_rpc_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMercenaryNameFieldNumber = 1,
    kMercenaryLevelFieldNumber = 2,
  };
  // string mercenaryName = 1;
  void clear_mercenaryname();
  const std::string& mercenaryname() const;
  void set_mercenaryname(const std::string& value);
  void set_mercenaryname(std::string&& value);
  void set_mercenaryname(const char* value);
  void set_mercenaryname(const char* value, size_t size);
  std::string* mutable_mercenaryname();
  std::string* release_mercenaryname();
  void set_allocated_mercenaryname(std::string* mercenaryname);
  private:
  const std::string& _internal_mercenaryname() const;
  void _internal_set_mercenaryname(const std::string& value);
  std::string* _internal_mutable_mercenaryname();
  public:

  // int32 mercenaryLevel = 2;
  void clear_mercenarylevel();
  ::PROTOBUF_NAMESPACE_ID::int32 mercenarylevel() const;
  void set_mercenarylevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mercenarylevel() const;
  void _internal_set_mercenarylevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:yyb.Mercenary)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mercenaryname_;
  ::PROTOBUF_NAMESPACE_ID::int32 mercenarylevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Stage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yyb.Stage) */ {
 public:
  Stage();
  virtual ~Stage();

  Stage(const Stage& from);
  Stage(Stage&& from) noexcept
    : Stage() {
    *this = ::std::move(from);
  }

  inline Stage& operator=(const Stage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stage& operator=(Stage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Stage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stage* internal_default_instance() {
    return reinterpret_cast<const Stage*>(
               &_Stage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Stage& a, Stage& b) {
    a.Swap(&b);
  }
  inline void Swap(Stage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Stage* New() const final {
    return CreateMaybeMessage<Stage>(nullptr);
  }

  Stage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Stage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Stage& from);
  void MergeFrom(const Stage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yyb.Stage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fservice_2eproto);
    return ::descriptor_table_rpc_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStageScoreFieldNumber = 2,
    kStageNumFieldNumber = 1,
  };
  // int64 stageScore = 2;
  void clear_stagescore();
  ::PROTOBUF_NAMESPACE_ID::int64 stagescore() const;
  void set_stagescore(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_stagescore() const;
  void _internal_set_stagescore(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 stageNum = 1;
  void clear_stagenum();
  ::PROTOBUF_NAMESPACE_ID::int32 stagenum() const;
  void set_stagenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stagenum() const;
  void _internal_set_stagenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:yyb.Stage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 stagescore_;
  ::PROTOBUF_NAMESPACE_ID::int32 stagenum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpgradePlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yyb.UpgradePlayer) */ {
 public:
  UpgradePlayer();
  virtual ~UpgradePlayer();

  UpgradePlayer(const UpgradePlayer& from);
  UpgradePlayer(UpgradePlayer&& from) noexcept
    : UpgradePlayer() {
    *this = ::std::move(from);
  }

  inline UpgradePlayer& operator=(const UpgradePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpgradePlayer& operator=(UpgradePlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpgradePlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpgradePlayer* internal_default_instance() {
    return reinterpret_cast<const UpgradePlayer*>(
               &_UpgradePlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UpgradePlayer& a, UpgradePlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(UpgradePlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpgradePlayer* New() const final {
    return CreateMaybeMessage<UpgradePlayer>(nullptr);
  }

  UpgradePlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpgradePlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpgradePlayer& from);
  void MergeFrom(const UpgradePlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpgradePlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yyb.UpgradePlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fservice_2eproto);
    return ::descriptor_table_rpc_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPowerLevelFieldNumber = 1,
    kAttackSpeedLevelFieldNumber = 2,
    kCriticalLevelFieldNumber = 3,
    kBuffDurationLevelFieldNumber = 4,
    kFreeCoinLevelFieldNumber = 5,
  };
  // int32 powerLevel = 1;
  void clear_powerlevel();
  ::PROTOBUF_NAMESPACE_ID::int32 powerlevel() const;
  void set_powerlevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_powerlevel() const;
  void _internal_set_powerlevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 attackSpeedLevel = 2;
  void clear_attackspeedlevel();
  ::PROTOBUF_NAMESPACE_ID::int32 attackspeedlevel() const;
  void set_attackspeedlevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attackspeedlevel() const;
  void _internal_set_attackspeedlevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 criticalLevel = 3;
  void clear_criticallevel();
  ::PROTOBUF_NAMESPACE_ID::int32 criticallevel() const;
  void set_criticallevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_criticallevel() const;
  void _internal_set_criticallevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 buffDurationLevel = 4;
  void clear_buffdurationlevel();
  ::PROTOBUF_NAMESPACE_ID::int32 buffdurationlevel() const;
  void set_buffdurationlevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buffdurationlevel() const;
  void _internal_set_buffdurationlevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 freeCoinLevel = 5;
  void clear_freecoinlevel();
  ::PROTOBUF_NAMESPACE_ID::int32 freecoinlevel() const;
  void set_freecoinlevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_freecoinlevel() const;
  void _internal_set_freecoinlevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:yyb.UpgradePlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 powerlevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 attackspeedlevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 criticallevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 buffdurationlevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 freecoinlevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GameDataRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yyb.GameDataRequest) */ {
 public:
  GameDataRequest();
  virtual ~GameDataRequest();

  GameDataRequest(const GameDataRequest& from);
  GameDataRequest(GameDataRequest&& from) noexcept
    : GameDataRequest() {
    *this = ::std::move(from);
  }

  inline GameDataRequest& operator=(const GameDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameDataRequest& operator=(GameDataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameDataRequest* internal_default_instance() {
    return reinterpret_cast<const GameDataRequest*>(
               &_GameDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GameDataRequest& a, GameDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GameDataRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameDataRequest* New() const final {
    return CreateMaybeMessage<GameDataRequest>(nullptr);
  }

  GameDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameDataRequest& from);
  void MergeFrom(const GameDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yyb.GameDataRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fservice_2eproto);
    return ::descriptor_table_rpc_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kMercenariesFieldNumber = 3,
    kStageFieldNumber = 4,
    kUpgradePlayerFieldNumber = 5,
  };
  // repeated .yyb.Item items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::yyb::Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::yyb::Item >*
      mutable_items();
  private:
  const ::yyb::Item& _internal_items(int index) const;
  ::yyb::Item* _internal_add_items();
  public:
  const ::yyb::Item& items(int index) const;
  ::yyb::Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::yyb::Item >&
      items() const;

  // repeated .yyb.Mercenary mercenaries = 3;
  int mercenaries_size() const;
  private:
  int _internal_mercenaries_size() const;
  public:
  void clear_mercenaries();
  ::yyb::Mercenary* mutable_mercenaries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::yyb::Mercenary >*
      mutable_mercenaries();
  private:
  const ::yyb::Mercenary& _internal_mercenaries(int index) const;
  ::yyb::Mercenary* _internal_add_mercenaries();
  public:
  const ::yyb::Mercenary& mercenaries(int index) const;
  ::yyb::Mercenary* add_mercenaries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::yyb::Mercenary >&
      mercenaries() const;

  // .yyb.Stage stage = 4;
  bool has_stage() const;
  private:
  bool _internal_has_stage() const;
  public:
  void clear_stage();
  const ::yyb::Stage& stage() const;
  ::yyb::Stage* release_stage();
  ::yyb::Stage* mutable_stage();
  void set_allocated_stage(::yyb::Stage* stage);
  private:
  const ::yyb::Stage& _internal_stage() const;
  ::yyb::Stage* _internal_mutable_stage();
  public:

  // .yyb.UpgradePlayer upgradePlayer = 5;
  bool has_upgradeplayer() const;
  private:
  bool _internal_has_upgradeplayer() const;
  public:
  void clear_upgradeplayer();
  const ::yyb::UpgradePlayer& upgradeplayer() const;
  ::yyb::UpgradePlayer* release_upgradeplayer();
  ::yyb::UpgradePlayer* mutable_upgradeplayer();
  void set_allocated_upgradeplayer(::yyb::UpgradePlayer* upgradeplayer);
  private:
  const ::yyb::UpgradePlayer& _internal_upgradeplayer() const;
  ::yyb::UpgradePlayer* _internal_mutable_upgradeplayer();
  public:

  // @@protoc_insertion_point(class_scope:yyb.GameDataRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::yyb::Item > items_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::yyb::Mercenary > mercenaries_;
  ::yyb::Stage* stage_;
  ::yyb::UpgradePlayer* upgradeplayer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GameDataReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yyb.GameDataReply) */ {
 public:
  GameDataReply();
  virtual ~GameDataReply();

  GameDataReply(const GameDataReply& from);
  GameDataReply(GameDataReply&& from) noexcept
    : GameDataReply() {
    *this = ::std::move(from);
  }

  inline GameDataReply& operator=(const GameDataReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameDataReply& operator=(GameDataReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameDataReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameDataReply* internal_default_instance() {
    return reinterpret_cast<const GameDataReply*>(
               &_GameDataReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GameDataReply& a, GameDataReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GameDataReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameDataReply* New() const final {
    return CreateMaybeMessage<GameDataReply>(nullptr);
  }

  GameDataReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameDataReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameDataReply& from);
  void MergeFrom(const GameDataReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameDataReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yyb.GameDataReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fservice_2eproto);
    return ::descriptor_table_rpc_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kMercenariesFieldNumber = 3,
    kStageFieldNumber = 4,
    kUpgradePlayerFieldNumber = 5,
    kErrorFieldNumber = 1,
  };
  // repeated .yyb.Item items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::yyb::Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::yyb::Item >*
      mutable_items();
  private:
  const ::yyb::Item& _internal_items(int index) const;
  ::yyb::Item* _internal_add_items();
  public:
  const ::yyb::Item& items(int index) const;
  ::yyb::Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::yyb::Item >&
      items() const;

  // repeated .yyb.Mercenary mercenaries = 3;
  int mercenaries_size() const;
  private:
  int _internal_mercenaries_size() const;
  public:
  void clear_mercenaries();
  ::yyb::Mercenary* mutable_mercenaries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::yyb::Mercenary >*
      mutable_mercenaries();
  private:
  const ::yyb::Mercenary& _internal_mercenaries(int index) const;
  ::yyb::Mercenary* _internal_add_mercenaries();
  public:
  const ::yyb::Mercenary& mercenaries(int index) const;
  ::yyb::Mercenary* add_mercenaries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::yyb::Mercenary >&
      mercenaries() const;

  // .yyb.Stage stage = 4;
  bool has_stage() const;
  private:
  bool _internal_has_stage() const;
  public:
  void clear_stage();
  const ::yyb::Stage& stage() const;
  ::yyb::Stage* release_stage();
  ::yyb::Stage* mutable_stage();
  void set_allocated_stage(::yyb::Stage* stage);
  private:
  const ::yyb::Stage& _internal_stage() const;
  ::yyb::Stage* _internal_mutable_stage();
  public:

  // .yyb.UpgradePlayer upgradePlayer = 5;
  bool has_upgradeplayer() const;
  private:
  bool _internal_has_upgradeplayer() const;
  public:
  void clear_upgradeplayer();
  const ::yyb::UpgradePlayer& upgradeplayer() const;
  ::yyb::UpgradePlayer* release_upgradeplayer();
  ::yyb::UpgradePlayer* mutable_upgradeplayer();
  void set_allocated_upgradeplayer(::yyb::UpgradePlayer* upgradeplayer);
  private:
  const ::yyb::UpgradePlayer& _internal_upgradeplayer() const;
  ::yyb::UpgradePlayer* _internal_mutable_upgradeplayer();
  public:

  // .yyb.ERROR_CODE error = 1;
  void clear_error();
  ::yyb::ERROR_CODE error() const;
  void set_error(::yyb::ERROR_CODE value);
  private:
  ::yyb::ERROR_CODE _internal_error() const;
  void _internal_set_error(::yyb::ERROR_CODE value);
  public:

  // @@protoc_insertion_point(class_scope:yyb.GameDataReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::yyb::Item > items_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::yyb::Mercenary > mercenaries_;
  ::yyb::Stage* stage_;
  ::yyb::UpgradePlayer* upgradeplayer_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RankingRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yyb.RankingRequest) */ {
 public:
  RankingRequest();
  virtual ~RankingRequest();

  RankingRequest(const RankingRequest& from);
  RankingRequest(RankingRequest&& from) noexcept
    : RankingRequest() {
    *this = ::std::move(from);
  }

  inline RankingRequest& operator=(const RankingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankingRequest& operator=(RankingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankingRequest* internal_default_instance() {
    return reinterpret_cast<const RankingRequest*>(
               &_RankingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RankingRequest& a, RankingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RankingRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankingRequest* New() const final {
    return CreateMaybeMessage<RankingRequest>(nullptr);
  }

  RankingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankingRequest& from);
  void MergeFrom(const RankingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yyb.RankingRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fservice_2eproto);
    return ::descriptor_table_rpc_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScoreFieldNumber = 1,
  };
  // int64 score = 1;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int64 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:yyb.RankingRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RankingReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yyb.RankingReply) */ {
 public:
  RankingReply();
  virtual ~RankingReply();

  RankingReply(const RankingReply& from);
  RankingReply(RankingReply&& from) noexcept
    : RankingReply() {
    *this = ::std::move(from);
  }

  inline RankingReply& operator=(const RankingReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankingReply& operator=(RankingReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankingReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankingReply* internal_default_instance() {
    return reinterpret_cast<const RankingReply*>(
               &_RankingReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RankingReply& a, RankingReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RankingReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankingReply* New() const final {
    return CreateMaybeMessage<RankingReply>(nullptr);
  }

  RankingReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankingReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankingReply& from);
  void MergeFrom(const RankingReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankingReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yyb.RankingReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fservice_2eproto);
    return ::descriptor_table_rpc_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // .yyb.ERROR_CODE error = 1;
  void clear_error();
  ::yyb::ERROR_CODE error() const;
  void set_error(::yyb::ERROR_CODE value);
  private:
  ::yyb::ERROR_CODE _internal_error() const;
  void _internal_set_error(::yyb::ERROR_CODE value);
  public:

  // @@protoc_insertion_point(class_scope:yyb.RankingReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RankingListRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yyb.RankingListRequest) */ {
 public:
  RankingListRequest();
  virtual ~RankingListRequest();

  RankingListRequest(const RankingListRequest& from);
  RankingListRequest(RankingListRequest&& from) noexcept
    : RankingListRequest() {
    *this = ::std::move(from);
  }

  inline RankingListRequest& operator=(const RankingListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankingListRequest& operator=(RankingListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankingListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankingListRequest* internal_default_instance() {
    return reinterpret_cast<const RankingListRequest*>(
               &_RankingListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RankingListRequest& a, RankingListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RankingListRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankingListRequest* New() const final {
    return CreateMaybeMessage<RankingListRequest>(nullptr);
  }

  RankingListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankingListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankingListRequest& from);
  void MergeFrom(const RankingListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankingListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yyb.RankingListRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fservice_2eproto);
    return ::descriptor_table_rpc_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:yyb.RankingListRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RankingListReply_Ranking :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yyb.RankingListReply.Ranking) */ {
 public:
  RankingListReply_Ranking();
  virtual ~RankingListReply_Ranking();

  RankingListReply_Ranking(const RankingListReply_Ranking& from);
  RankingListReply_Ranking(RankingListReply_Ranking&& from) noexcept
    : RankingListReply_Ranking() {
    *this = ::std::move(from);
  }

  inline RankingListReply_Ranking& operator=(const RankingListReply_Ranking& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankingListReply_Ranking& operator=(RankingListReply_Ranking&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankingListReply_Ranking& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankingListReply_Ranking* internal_default_instance() {
    return reinterpret_cast<const RankingListReply_Ranking*>(
               &_RankingListReply_Ranking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RankingListReply_Ranking& a, RankingListReply_Ranking& b) {
    a.Swap(&b);
  }
  inline void Swap(RankingListReply_Ranking* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankingListReply_Ranking* New() const final {
    return CreateMaybeMessage<RankingListReply_Ranking>(nullptr);
  }

  RankingListReply_Ranking* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankingListReply_Ranking>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankingListReply_Ranking& from);
  void MergeFrom(const RankingListReply_Ranking& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankingListReply_Ranking* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yyb.RankingListReply.Ranking";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fservice_2eproto);
    return ::descriptor_table_rpc_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickNameFieldNumber = 1,
    kRankFieldNumber = 2,
    kScoreFieldNumber = 3,
  };
  // string nickName = 1;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // int32 rank = 2;
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 score = 3;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:yyb.RankingListReply.Ranking)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RankingListReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yyb.RankingListReply) */ {
 public:
  RankingListReply();
  virtual ~RankingListReply();

  RankingListReply(const RankingListReply& from);
  RankingListReply(RankingListReply&& from) noexcept
    : RankingListReply() {
    *this = ::std::move(from);
  }

  inline RankingListReply& operator=(const RankingListReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankingListReply& operator=(RankingListReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankingListReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankingListReply* internal_default_instance() {
    return reinterpret_cast<const RankingListReply*>(
               &_RankingListReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(RankingListReply& a, RankingListReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RankingListReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankingListReply* New() const final {
    return CreateMaybeMessage<RankingListReply>(nullptr);
  }

  RankingListReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankingListReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankingListReply& from);
  void MergeFrom(const RankingListReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankingListReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yyb.RankingListReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fservice_2eproto);
    return ::descriptor_table_rpc_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RankingListReply_Ranking Ranking;

  // accessors -------------------------------------------------------

  enum : int {
    kRankingsFieldNumber = 3,
    kMyRankingFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // repeated .yyb.RankingListReply.Ranking rankings = 3;
  int rankings_size() const;
  private:
  int _internal_rankings_size() const;
  public:
  void clear_rankings();
  ::yyb::RankingListReply_Ranking* mutable_rankings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::yyb::RankingListReply_Ranking >*
      mutable_rankings();
  private:
  const ::yyb::RankingListReply_Ranking& _internal_rankings(int index) const;
  ::yyb::RankingListReply_Ranking* _internal_add_rankings();
  public:
  const ::yyb::RankingListReply_Ranking& rankings(int index) const;
  ::yyb::RankingListReply_Ranking* add_rankings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::yyb::RankingListReply_Ranking >&
      rankings() const;

  // .yyb.RankingListReply.Ranking myRanking = 2;
  bool has_myranking() const;
  private:
  bool _internal_has_myranking() const;
  public:
  void clear_myranking();
  const ::yyb::RankingListReply_Ranking& myranking() const;
  ::yyb::RankingListReply_Ranking* release_myranking();
  ::yyb::RankingListReply_Ranking* mutable_myranking();
  void set_allocated_myranking(::yyb::RankingListReply_Ranking* myranking);
  private:
  const ::yyb::RankingListReply_Ranking& _internal_myranking() const;
  ::yyb::RankingListReply_Ranking* _internal_mutable_myranking();
  public:

  // .yyb.ERROR_CODE error = 1;
  void clear_error();
  ::yyb::ERROR_CODE error() const;
  void set_error(::yyb::ERROR_CODE value);
  private:
  ::yyb::ERROR_CODE _internal_error() const;
  void _internal_set_error(::yyb::ERROR_CODE value);
  public:

  // @@protoc_insertion_point(class_scope:yyb.RankingListReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::yyb::RankingListReply_Ranking > rankings_;
  ::yyb::RankingListReply_Ranking* myranking_;
  int error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RpcServiceExampleRequest

// int32 arg1 = 1;
inline void RpcServiceExampleRequest::clear_arg1() {
  arg1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RpcServiceExampleRequest::_internal_arg1() const {
  return arg1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RpcServiceExampleRequest::arg1() const {
  // @@protoc_insertion_point(field_get:yyb.RpcServiceExampleRequest.arg1)
  return _internal_arg1();
}
inline void RpcServiceExampleRequest::_internal_set_arg1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  arg1_ = value;
}
inline void RpcServiceExampleRequest::set_arg1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_arg1(value);
  // @@protoc_insertion_point(field_set:yyb.RpcServiceExampleRequest.arg1)
}

// float arg2 = 2;
inline void RpcServiceExampleRequest::clear_arg2() {
  arg2_ = 0;
}
inline float RpcServiceExampleRequest::_internal_arg2() const {
  return arg2_;
}
inline float RpcServiceExampleRequest::arg2() const {
  // @@protoc_insertion_point(field_get:yyb.RpcServiceExampleRequest.arg2)
  return _internal_arg2();
}
inline void RpcServiceExampleRequest::_internal_set_arg2(float value) {
  
  arg2_ = value;
}
inline void RpcServiceExampleRequest::set_arg2(float value) {
  _internal_set_arg2(value);
  // @@protoc_insertion_point(field_set:yyb.RpcServiceExampleRequest.arg2)
}

// string arg3 = 3;
inline void RpcServiceExampleRequest::clear_arg3() {
  arg3_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RpcServiceExampleRequest::arg3() const {
  // @@protoc_insertion_point(field_get:yyb.RpcServiceExampleRequest.arg3)
  return _internal_arg3();
}
inline void RpcServiceExampleRequest::set_arg3(const std::string& value) {
  _internal_set_arg3(value);
  // @@protoc_insertion_point(field_set:yyb.RpcServiceExampleRequest.arg3)
}
inline std::string* RpcServiceExampleRequest::mutable_arg3() {
  // @@protoc_insertion_point(field_mutable:yyb.RpcServiceExampleRequest.arg3)
  return _internal_mutable_arg3();
}
inline const std::string& RpcServiceExampleRequest::_internal_arg3() const {
  return arg3_.GetNoArena();
}
inline void RpcServiceExampleRequest::_internal_set_arg3(const std::string& value) {
  
  arg3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RpcServiceExampleRequest::set_arg3(std::string&& value) {
  
  arg3_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yyb.RpcServiceExampleRequest.arg3)
}
inline void RpcServiceExampleRequest::set_arg3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  arg3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yyb.RpcServiceExampleRequest.arg3)
}
inline void RpcServiceExampleRequest::set_arg3(const char* value, size_t size) {
  
  arg3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yyb.RpcServiceExampleRequest.arg3)
}
inline std::string* RpcServiceExampleRequest::_internal_mutable_arg3() {
  
  return arg3_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RpcServiceExampleRequest::release_arg3() {
  // @@protoc_insertion_point(field_release:yyb.RpcServiceExampleRequest.arg3)
  
  return arg3_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RpcServiceExampleRequest::set_allocated_arg3(std::string* arg3) {
  if (arg3 != nullptr) {
    
  } else {
    
  }
  arg3_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), arg3);
  // @@protoc_insertion_point(field_set_allocated:yyb.RpcServiceExampleRequest.arg3)
}

// bool arg4 = 4;
inline void RpcServiceExampleRequest::clear_arg4() {
  arg4_ = false;
}
inline bool RpcServiceExampleRequest::_internal_arg4() const {
  return arg4_;
}
inline bool RpcServiceExampleRequest::arg4() const {
  // @@protoc_insertion_point(field_get:yyb.RpcServiceExampleRequest.arg4)
  return _internal_arg4();
}
inline void RpcServiceExampleRequest::_internal_set_arg4(bool value) {
  
  arg4_ = value;
}
inline void RpcServiceExampleRequest::set_arg4(bool value) {
  _internal_set_arg4(value);
  // @@protoc_insertion_point(field_set:yyb.RpcServiceExampleRequest.arg4)
}

// repeated int32 arg5 = 5;
inline int RpcServiceExampleRequest::_internal_arg5_size() const {
  return arg5_.size();
}
inline int RpcServiceExampleRequest::arg5_size() const {
  return _internal_arg5_size();
}
inline void RpcServiceExampleRequest::clear_arg5() {
  arg5_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RpcServiceExampleRequest::_internal_arg5(int index) const {
  return arg5_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RpcServiceExampleRequest::arg5(int index) const {
  // @@protoc_insertion_point(field_get:yyb.RpcServiceExampleRequest.arg5)
  return _internal_arg5(index);
}
inline void RpcServiceExampleRequest::set_arg5(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  arg5_.Set(index, value);
  // @@protoc_insertion_point(field_set:yyb.RpcServiceExampleRequest.arg5)
}
inline void RpcServiceExampleRequest::_internal_add_arg5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  arg5_.Add(value);
}
inline void RpcServiceExampleRequest::add_arg5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_arg5(value);
  // @@protoc_insertion_point(field_add:yyb.RpcServiceExampleRequest.arg5)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RpcServiceExampleRequest::_internal_arg5() const {
  return arg5_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RpcServiceExampleRequest::arg5() const {
  // @@protoc_insertion_point(field_list:yyb.RpcServiceExampleRequest.arg5)
  return _internal_arg5();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RpcServiceExampleRequest::_internal_mutable_arg5() {
  return &arg5_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RpcServiceExampleRequest::mutable_arg5() {
  // @@protoc_insertion_point(field_mutable_list:yyb.RpcServiceExampleRequest.arg5)
  return _internal_mutable_arg5();
}

// -------------------------------------------------------------------

// RpcServiceExampleReply

// .yyb.ERROR_CODE error = 1;
inline void RpcServiceExampleReply::clear_error() {
  error_ = 0;
}
inline ::yyb::ERROR_CODE RpcServiceExampleReply::_internal_error() const {
  return static_cast< ::yyb::ERROR_CODE >(error_);
}
inline ::yyb::ERROR_CODE RpcServiceExampleReply::error() const {
  // @@protoc_insertion_point(field_get:yyb.RpcServiceExampleReply.error)
  return _internal_error();
}
inline void RpcServiceExampleReply::_internal_set_error(::yyb::ERROR_CODE value) {
  
  error_ = value;
}
inline void RpcServiceExampleReply::set_error(::yyb::ERROR_CODE value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:yyb.RpcServiceExampleReply.error)
}

// -------------------------------------------------------------------

// Empty

// -------------------------------------------------------------------

// PushNotification

// string payload = 1;
inline void PushNotification::clear_payload() {
  payload_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PushNotification::payload() const {
  // @@protoc_insertion_point(field_get:yyb.PushNotification.payload)
  return _internal_payload();
}
inline void PushNotification::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:yyb.PushNotification.payload)
}
inline std::string* PushNotification::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:yyb.PushNotification.payload)
  return _internal_mutable_payload();
}
inline const std::string& PushNotification::_internal_payload() const {
  return payload_.GetNoArena();
}
inline void PushNotification::_internal_set_payload(const std::string& value) {
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PushNotification::set_payload(std::string&& value) {
  
  payload_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yyb.PushNotification.payload)
}
inline void PushNotification::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yyb.PushNotification.payload)
}
inline void PushNotification::set_payload(const char* value, size_t size) {
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yyb.PushNotification.payload)
}
inline std::string* PushNotification::_internal_mutable_payload() {
  
  return payload_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PushNotification::release_payload() {
  // @@protoc_insertion_point(field_release:yyb.PushNotification.payload)
  
  return payload_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PushNotification::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:yyb.PushNotification.payload)
}

// -------------------------------------------------------------------

// LoginRequest

// .yyb.LoginRequest.LOGIN_TYPE loginType = 1;
inline void LoginRequest::clear_logintype() {
  logintype_ = 0;
}
inline ::yyb::LoginRequest_LOGIN_TYPE LoginRequest::_internal_logintype() const {
  return static_cast< ::yyb::LoginRequest_LOGIN_TYPE >(logintype_);
}
inline ::yyb::LoginRequest_LOGIN_TYPE LoginRequest::logintype() const {
  // @@protoc_insertion_point(field_get:yyb.LoginRequest.loginType)
  return _internal_logintype();
}
inline void LoginRequest::_internal_set_logintype(::yyb::LoginRequest_LOGIN_TYPE value) {
  
  logintype_ = value;
}
inline void LoginRequest::set_logintype(::yyb::LoginRequest_LOGIN_TYPE value) {
  _internal_set_logintype(value);
  // @@protoc_insertion_point(field_set:yyb.LoginRequest.loginType)
}

// string loginKey = 2;
inline void LoginRequest::clear_loginkey() {
  loginkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRequest::loginkey() const {
  // @@protoc_insertion_point(field_get:yyb.LoginRequest.loginKey)
  return _internal_loginkey();
}
inline void LoginRequest::set_loginkey(const std::string& value) {
  _internal_set_loginkey(value);
  // @@protoc_insertion_point(field_set:yyb.LoginRequest.loginKey)
}
inline std::string* LoginRequest::mutable_loginkey() {
  // @@protoc_insertion_point(field_mutable:yyb.LoginRequest.loginKey)
  return _internal_mutable_loginkey();
}
inline const std::string& LoginRequest::_internal_loginkey() const {
  return loginkey_.GetNoArena();
}
inline void LoginRequest::_internal_set_loginkey(const std::string& value) {
  
  loginkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginRequest::set_loginkey(std::string&& value) {
  
  loginkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yyb.LoginRequest.loginKey)
}
inline void LoginRequest::set_loginkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  loginkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yyb.LoginRequest.loginKey)
}
inline void LoginRequest::set_loginkey(const char* value, size_t size) {
  
  loginkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yyb.LoginRequest.loginKey)
}
inline std::string* LoginRequest::_internal_mutable_loginkey() {
  
  return loginkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRequest::release_loginkey() {
  // @@protoc_insertion_point(field_release:yyb.LoginRequest.loginKey)
  
  return loginkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_loginkey(std::string* loginkey) {
  if (loginkey != nullptr) {
    
  } else {
    
  }
  loginkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loginkey);
  // @@protoc_insertion_point(field_set_allocated:yyb.LoginRequest.loginKey)
}

// string idToken = 3;
inline void LoginRequest::clear_idtoken() {
  idtoken_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRequest::idtoken() const {
  // @@protoc_insertion_point(field_get:yyb.LoginRequest.idToken)
  return _internal_idtoken();
}
inline void LoginRequest::set_idtoken(const std::string& value) {
  _internal_set_idtoken(value);
  // @@protoc_insertion_point(field_set:yyb.LoginRequest.idToken)
}
inline std::string* LoginRequest::mutable_idtoken() {
  // @@protoc_insertion_point(field_mutable:yyb.LoginRequest.idToken)
  return _internal_mutable_idtoken();
}
inline const std::string& LoginRequest::_internal_idtoken() const {
  return idtoken_.GetNoArena();
}
inline void LoginRequest::_internal_set_idtoken(const std::string& value) {
  
  idtoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginRequest::set_idtoken(std::string&& value) {
  
  idtoken_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yyb.LoginRequest.idToken)
}
inline void LoginRequest::set_idtoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  idtoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yyb.LoginRequest.idToken)
}
inline void LoginRequest::set_idtoken(const char* value, size_t size) {
  
  idtoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yyb.LoginRequest.idToken)
}
inline std::string* LoginRequest::_internal_mutable_idtoken() {
  
  return idtoken_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRequest::release_idtoken() {
  // @@protoc_insertion_point(field_release:yyb.LoginRequest.idToken)
  
  return idtoken_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_idtoken(std::string* idtoken) {
  if (idtoken != nullptr) {
    
  } else {
    
  }
  idtoken_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), idtoken);
  // @@protoc_insertion_point(field_set_allocated:yyb.LoginRequest.idToken)
}

// string nickName = 4;
inline void LoginRequest::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRequest::nickname() const {
  // @@protoc_insertion_point(field_get:yyb.LoginRequest.nickName)
  return _internal_nickname();
}
inline void LoginRequest::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:yyb.LoginRequest.nickName)
}
inline std::string* LoginRequest::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:yyb.LoginRequest.nickName)
  return _internal_mutable_nickname();
}
inline const std::string& LoginRequest::_internal_nickname() const {
  return nickname_.GetNoArena();
}
inline void LoginRequest::_internal_set_nickname(const std::string& value) {
  
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginRequest::set_nickname(std::string&& value) {
  
  nickname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yyb.LoginRequest.nickName)
}
inline void LoginRequest::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yyb.LoginRequest.nickName)
}
inline void LoginRequest::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yyb.LoginRequest.nickName)
}
inline std::string* LoginRequest::_internal_mutable_nickname() {
  
  return nickname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRequest::release_nickname() {
  // @@protoc_insertion_point(field_release:yyb.LoginRequest.nickName)
  
  return nickname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:yyb.LoginRequest.nickName)
}

// -------------------------------------------------------------------

// LoginReply

// .yyb.ERROR_CODE error = 1;
inline void LoginReply::clear_error() {
  error_ = 0;
}
inline ::yyb::ERROR_CODE LoginReply::_internal_error() const {
  return static_cast< ::yyb::ERROR_CODE >(error_);
}
inline ::yyb::ERROR_CODE LoginReply::error() const {
  // @@protoc_insertion_point(field_get:yyb.LoginReply.error)
  return _internal_error();
}
inline void LoginReply::_internal_set_error(::yyb::ERROR_CODE value) {
  
  error_ = value;
}
inline void LoginReply::set_error(::yyb::ERROR_CODE value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:yyb.LoginReply.error)
}

// int32 usn = 2;
inline void LoginReply::clear_usn() {
  usn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginReply::_internal_usn() const {
  return usn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginReply::usn() const {
  // @@protoc_insertion_point(field_get:yyb.LoginReply.usn)
  return _internal_usn();
}
inline void LoginReply::_internal_set_usn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  usn_ = value;
}
inline void LoginReply::set_usn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_usn(value);
  // @@protoc_insertion_point(field_set:yyb.LoginReply.usn)
}

// string nickName = 3;
inline void LoginReply::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginReply::nickname() const {
  // @@protoc_insertion_point(field_get:yyb.LoginReply.nickName)
  return _internal_nickname();
}
inline void LoginReply::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:yyb.LoginReply.nickName)
}
inline std::string* LoginReply::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:yyb.LoginReply.nickName)
  return _internal_mutable_nickname();
}
inline const std::string& LoginReply::_internal_nickname() const {
  return nickname_.GetNoArena();
}
inline void LoginReply::_internal_set_nickname(const std::string& value) {
  
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginReply::set_nickname(std::string&& value) {
  
  nickname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yyb.LoginReply.nickName)
}
inline void LoginReply::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yyb.LoginReply.nickName)
}
inline void LoginReply::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yyb.LoginReply.nickName)
}
inline std::string* LoginReply::_internal_mutable_nickname() {
  
  return nickname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginReply::release_nickname() {
  // @@protoc_insertion_point(field_release:yyb.LoginReply.nickName)
  
  return nickname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReply::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:yyb.LoginReply.nickName)
}

// string loginKey = 4;
inline void LoginReply::clear_loginkey() {
  loginkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginReply::loginkey() const {
  // @@protoc_insertion_point(field_get:yyb.LoginReply.loginKey)
  return _internal_loginkey();
}
inline void LoginReply::set_loginkey(const std::string& value) {
  _internal_set_loginkey(value);
  // @@protoc_insertion_point(field_set:yyb.LoginReply.loginKey)
}
inline std::string* LoginReply::mutable_loginkey() {
  // @@protoc_insertion_point(field_mutable:yyb.LoginReply.loginKey)
  return _internal_mutable_loginkey();
}
inline const std::string& LoginReply::_internal_loginkey() const {
  return loginkey_.GetNoArena();
}
inline void LoginReply::_internal_set_loginkey(const std::string& value) {
  
  loginkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginReply::set_loginkey(std::string&& value) {
  
  loginkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yyb.LoginReply.loginKey)
}
inline void LoginReply::set_loginkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  loginkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yyb.LoginReply.loginKey)
}
inline void LoginReply::set_loginkey(const char* value, size_t size) {
  
  loginkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yyb.LoginReply.loginKey)
}
inline std::string* LoginReply::_internal_mutable_loginkey() {
  
  return loginkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginReply::release_loginkey() {
  // @@protoc_insertion_point(field_release:yyb.LoginReply.loginKey)
  
  return loginkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReply::set_allocated_loginkey(std::string* loginkey) {
  if (loginkey != nullptr) {
    
  } else {
    
  }
  loginkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loginkey);
  // @@protoc_insertion_point(field_set_allocated:yyb.LoginReply.loginKey)
}

// string accessKey = 5;
inline void LoginReply::clear_accesskey() {
  accesskey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginReply::accesskey() const {
  // @@protoc_insertion_point(field_get:yyb.LoginReply.accessKey)
  return _internal_accesskey();
}
inline void LoginReply::set_accesskey(const std::string& value) {
  _internal_set_accesskey(value);
  // @@protoc_insertion_point(field_set:yyb.LoginReply.accessKey)
}
inline std::string* LoginReply::mutable_accesskey() {
  // @@protoc_insertion_point(field_mutable:yyb.LoginReply.accessKey)
  return _internal_mutable_accesskey();
}
inline const std::string& LoginReply::_internal_accesskey() const {
  return accesskey_.GetNoArena();
}
inline void LoginReply::_internal_set_accesskey(const std::string& value) {
  
  accesskey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginReply::set_accesskey(std::string&& value) {
  
  accesskey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yyb.LoginReply.accessKey)
}
inline void LoginReply::set_accesskey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accesskey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yyb.LoginReply.accessKey)
}
inline void LoginReply::set_accesskey(const char* value, size_t size) {
  
  accesskey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yyb.LoginReply.accessKey)
}
inline std::string* LoginReply::_internal_mutable_accesskey() {
  
  return accesskey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginReply::release_accesskey() {
  // @@protoc_insertion_point(field_release:yyb.LoginReply.accessKey)
  
  return accesskey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReply::set_allocated_accesskey(std::string* accesskey) {
  if (accesskey != nullptr) {
    
  } else {
    
  }
  accesskey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accesskey);
  // @@protoc_insertion_point(field_set_allocated:yyb.LoginReply.accessKey)
}

// -------------------------------------------------------------------

// Item

// string itemName = 1;
inline void Item::clear_itemname() {
  itemname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Item::itemname() const {
  // @@protoc_insertion_point(field_get:yyb.Item.itemName)
  return _internal_itemname();
}
inline void Item::set_itemname(const std::string& value) {
  _internal_set_itemname(value);
  // @@protoc_insertion_point(field_set:yyb.Item.itemName)
}
inline std::string* Item::mutable_itemname() {
  // @@protoc_insertion_point(field_mutable:yyb.Item.itemName)
  return _internal_mutable_itemname();
}
inline const std::string& Item::_internal_itemname() const {
  return itemname_.GetNoArena();
}
inline void Item::_internal_set_itemname(const std::string& value) {
  
  itemname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Item::set_itemname(std::string&& value) {
  
  itemname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yyb.Item.itemName)
}
inline void Item::set_itemname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  itemname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yyb.Item.itemName)
}
inline void Item::set_itemname(const char* value, size_t size) {
  
  itemname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yyb.Item.itemName)
}
inline std::string* Item::_internal_mutable_itemname() {
  
  return itemname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Item::release_itemname() {
  // @@protoc_insertion_point(field_release:yyb.Item.itemName)
  
  return itemname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Item::set_allocated_itemname(std::string* itemname) {
  if (itemname != nullptr) {
    
  } else {
    
  }
  itemname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), itemname);
  // @@protoc_insertion_point(field_set_allocated:yyb.Item.itemName)
}

// .yyb.ITEM_TYPE itemType = 2;
inline void Item::clear_itemtype() {
  itemtype_ = 0;
}
inline ::yyb::ITEM_TYPE Item::_internal_itemtype() const {
  return static_cast< ::yyb::ITEM_TYPE >(itemtype_);
}
inline ::yyb::ITEM_TYPE Item::itemtype() const {
  // @@protoc_insertion_point(field_get:yyb.Item.itemType)
  return _internal_itemtype();
}
inline void Item::_internal_set_itemtype(::yyb::ITEM_TYPE value) {
  
  itemtype_ = value;
}
inline void Item::set_itemtype(::yyb::ITEM_TYPE value) {
  _internal_set_itemtype(value);
  // @@protoc_insertion_point(field_set:yyb.Item.itemType)
}

// .yyb.ITEM_CATEGORY itemCategory = 3;
inline void Item::clear_itemcategory() {
  itemcategory_ = 0;
}
inline ::yyb::ITEM_CATEGORY Item::_internal_itemcategory() const {
  return static_cast< ::yyb::ITEM_CATEGORY >(itemcategory_);
}
inline ::yyb::ITEM_CATEGORY Item::itemcategory() const {
  // @@protoc_insertion_point(field_get:yyb.Item.itemCategory)
  return _internal_itemcategory();
}
inline void Item::_internal_set_itemcategory(::yyb::ITEM_CATEGORY value) {
  
  itemcategory_ = value;
}
inline void Item::set_itemcategory(::yyb::ITEM_CATEGORY value) {
  _internal_set_itemcategory(value);
  // @@protoc_insertion_point(field_set:yyb.Item.itemCategory)
}

// int32 itemCount = 4;
inline void Item::clear_itemcount() {
  itemcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Item::_internal_itemcount() const {
  return itemcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Item::itemcount() const {
  // @@protoc_insertion_point(field_get:yyb.Item.itemCount)
  return _internal_itemcount();
}
inline void Item::_internal_set_itemcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  itemcount_ = value;
}
inline void Item::set_itemcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_itemcount(value);
  // @@protoc_insertion_point(field_set:yyb.Item.itemCount)
}

// -------------------------------------------------------------------

// Mercenary

// string mercenaryName = 1;
inline void Mercenary::clear_mercenaryname() {
  mercenaryname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Mercenary::mercenaryname() const {
  // @@protoc_insertion_point(field_get:yyb.Mercenary.mercenaryName)
  return _internal_mercenaryname();
}
inline void Mercenary::set_mercenaryname(const std::string& value) {
  _internal_set_mercenaryname(value);
  // @@protoc_insertion_point(field_set:yyb.Mercenary.mercenaryName)
}
inline std::string* Mercenary::mutable_mercenaryname() {
  // @@protoc_insertion_point(field_mutable:yyb.Mercenary.mercenaryName)
  return _internal_mutable_mercenaryname();
}
inline const std::string& Mercenary::_internal_mercenaryname() const {
  return mercenaryname_.GetNoArena();
}
inline void Mercenary::_internal_set_mercenaryname(const std::string& value) {
  
  mercenaryname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Mercenary::set_mercenaryname(std::string&& value) {
  
  mercenaryname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yyb.Mercenary.mercenaryName)
}
inline void Mercenary::set_mercenaryname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mercenaryname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yyb.Mercenary.mercenaryName)
}
inline void Mercenary::set_mercenaryname(const char* value, size_t size) {
  
  mercenaryname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yyb.Mercenary.mercenaryName)
}
inline std::string* Mercenary::_internal_mutable_mercenaryname() {
  
  return mercenaryname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Mercenary::release_mercenaryname() {
  // @@protoc_insertion_point(field_release:yyb.Mercenary.mercenaryName)
  
  return mercenaryname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Mercenary::set_allocated_mercenaryname(std::string* mercenaryname) {
  if (mercenaryname != nullptr) {
    
  } else {
    
  }
  mercenaryname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mercenaryname);
  // @@protoc_insertion_point(field_set_allocated:yyb.Mercenary.mercenaryName)
}

// int32 mercenaryLevel = 2;
inline void Mercenary::clear_mercenarylevel() {
  mercenarylevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mercenary::_internal_mercenarylevel() const {
  return mercenarylevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mercenary::mercenarylevel() const {
  // @@protoc_insertion_point(field_get:yyb.Mercenary.mercenaryLevel)
  return _internal_mercenarylevel();
}
inline void Mercenary::_internal_set_mercenarylevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mercenarylevel_ = value;
}
inline void Mercenary::set_mercenarylevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mercenarylevel(value);
  // @@protoc_insertion_point(field_set:yyb.Mercenary.mercenaryLevel)
}

// -------------------------------------------------------------------

// Stage

// int32 stageNum = 1;
inline void Stage::clear_stagenum() {
  stagenum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stage::_internal_stagenum() const {
  return stagenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stage::stagenum() const {
  // @@protoc_insertion_point(field_get:yyb.Stage.stageNum)
  return _internal_stagenum();
}
inline void Stage::_internal_set_stagenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stagenum_ = value;
}
inline void Stage::set_stagenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stagenum(value);
  // @@protoc_insertion_point(field_set:yyb.Stage.stageNum)
}

// int64 stageScore = 2;
inline void Stage::clear_stagescore() {
  stagescore_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Stage::_internal_stagescore() const {
  return stagescore_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Stage::stagescore() const {
  // @@protoc_insertion_point(field_get:yyb.Stage.stageScore)
  return _internal_stagescore();
}
inline void Stage::_internal_set_stagescore(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  stagescore_ = value;
}
inline void Stage::set_stagescore(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_stagescore(value);
  // @@protoc_insertion_point(field_set:yyb.Stage.stageScore)
}

// -------------------------------------------------------------------

// UpgradePlayer

// int32 powerLevel = 1;
inline void UpgradePlayer::clear_powerlevel() {
  powerlevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpgradePlayer::_internal_powerlevel() const {
  return powerlevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpgradePlayer::powerlevel() const {
  // @@protoc_insertion_point(field_get:yyb.UpgradePlayer.powerLevel)
  return _internal_powerlevel();
}
inline void UpgradePlayer::_internal_set_powerlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  powerlevel_ = value;
}
inline void UpgradePlayer::set_powerlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_powerlevel(value);
  // @@protoc_insertion_point(field_set:yyb.UpgradePlayer.powerLevel)
}

// int32 attackSpeedLevel = 2;
inline void UpgradePlayer::clear_attackspeedlevel() {
  attackspeedlevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpgradePlayer::_internal_attackspeedlevel() const {
  return attackspeedlevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpgradePlayer::attackspeedlevel() const {
  // @@protoc_insertion_point(field_get:yyb.UpgradePlayer.attackSpeedLevel)
  return _internal_attackspeedlevel();
}
inline void UpgradePlayer::_internal_set_attackspeedlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attackspeedlevel_ = value;
}
inline void UpgradePlayer::set_attackspeedlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attackspeedlevel(value);
  // @@protoc_insertion_point(field_set:yyb.UpgradePlayer.attackSpeedLevel)
}

// int32 criticalLevel = 3;
inline void UpgradePlayer::clear_criticallevel() {
  criticallevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpgradePlayer::_internal_criticallevel() const {
  return criticallevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpgradePlayer::criticallevel() const {
  // @@protoc_insertion_point(field_get:yyb.UpgradePlayer.criticalLevel)
  return _internal_criticallevel();
}
inline void UpgradePlayer::_internal_set_criticallevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  criticallevel_ = value;
}
inline void UpgradePlayer::set_criticallevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_criticallevel(value);
  // @@protoc_insertion_point(field_set:yyb.UpgradePlayer.criticalLevel)
}

// int32 buffDurationLevel = 4;
inline void UpgradePlayer::clear_buffdurationlevel() {
  buffdurationlevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpgradePlayer::_internal_buffdurationlevel() const {
  return buffdurationlevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpgradePlayer::buffdurationlevel() const {
  // @@protoc_insertion_point(field_get:yyb.UpgradePlayer.buffDurationLevel)
  return _internal_buffdurationlevel();
}
inline void UpgradePlayer::_internal_set_buffdurationlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  buffdurationlevel_ = value;
}
inline void UpgradePlayer::set_buffdurationlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_buffdurationlevel(value);
  // @@protoc_insertion_point(field_set:yyb.UpgradePlayer.buffDurationLevel)
}

// int32 freeCoinLevel = 5;
inline void UpgradePlayer::clear_freecoinlevel() {
  freecoinlevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpgradePlayer::_internal_freecoinlevel() const {
  return freecoinlevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpgradePlayer::freecoinlevel() const {
  // @@protoc_insertion_point(field_get:yyb.UpgradePlayer.freeCoinLevel)
  return _internal_freecoinlevel();
}
inline void UpgradePlayer::_internal_set_freecoinlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  freecoinlevel_ = value;
}
inline void UpgradePlayer::set_freecoinlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_freecoinlevel(value);
  // @@protoc_insertion_point(field_set:yyb.UpgradePlayer.freeCoinLevel)
}

// -------------------------------------------------------------------

// GameDataRequest

// repeated .yyb.Item items = 2;
inline int GameDataRequest::_internal_items_size() const {
  return items_.size();
}
inline int GameDataRequest::items_size() const {
  return _internal_items_size();
}
inline void GameDataRequest::clear_items() {
  items_.Clear();
}
inline ::yyb::Item* GameDataRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:yyb.GameDataRequest.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::yyb::Item >*
GameDataRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:yyb.GameDataRequest.items)
  return &items_;
}
inline const ::yyb::Item& GameDataRequest::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::yyb::Item& GameDataRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:yyb.GameDataRequest.items)
  return _internal_items(index);
}
inline ::yyb::Item* GameDataRequest::_internal_add_items() {
  return items_.Add();
}
inline ::yyb::Item* GameDataRequest::add_items() {
  // @@protoc_insertion_point(field_add:yyb.GameDataRequest.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::yyb::Item >&
GameDataRequest::items() const {
  // @@protoc_insertion_point(field_list:yyb.GameDataRequest.items)
  return items_;
}

// repeated .yyb.Mercenary mercenaries = 3;
inline int GameDataRequest::_internal_mercenaries_size() const {
  return mercenaries_.size();
}
inline int GameDataRequest::mercenaries_size() const {
  return _internal_mercenaries_size();
}
inline void GameDataRequest::clear_mercenaries() {
  mercenaries_.Clear();
}
inline ::yyb::Mercenary* GameDataRequest::mutable_mercenaries(int index) {
  // @@protoc_insertion_point(field_mutable:yyb.GameDataRequest.mercenaries)
  return mercenaries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::yyb::Mercenary >*
GameDataRequest::mutable_mercenaries() {
  // @@protoc_insertion_point(field_mutable_list:yyb.GameDataRequest.mercenaries)
  return &mercenaries_;
}
inline const ::yyb::Mercenary& GameDataRequest::_internal_mercenaries(int index) const {
  return mercenaries_.Get(index);
}
inline const ::yyb::Mercenary& GameDataRequest::mercenaries(int index) const {
  // @@protoc_insertion_point(field_get:yyb.GameDataRequest.mercenaries)
  return _internal_mercenaries(index);
}
inline ::yyb::Mercenary* GameDataRequest::_internal_add_mercenaries() {
  return mercenaries_.Add();
}
inline ::yyb::Mercenary* GameDataRequest::add_mercenaries() {
  // @@protoc_insertion_point(field_add:yyb.GameDataRequest.mercenaries)
  return _internal_add_mercenaries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::yyb::Mercenary >&
GameDataRequest::mercenaries() const {
  // @@protoc_insertion_point(field_list:yyb.GameDataRequest.mercenaries)
  return mercenaries_;
}

// .yyb.Stage stage = 4;
inline bool GameDataRequest::_internal_has_stage() const {
  return this != internal_default_instance() && stage_ != nullptr;
}
inline bool GameDataRequest::has_stage() const {
  return _internal_has_stage();
}
inline void GameDataRequest::clear_stage() {
  if (GetArenaNoVirtual() == nullptr && stage_ != nullptr) {
    delete stage_;
  }
  stage_ = nullptr;
}
inline const ::yyb::Stage& GameDataRequest::_internal_stage() const {
  const ::yyb::Stage* p = stage_;
  return p != nullptr ? *p : *reinterpret_cast<const ::yyb::Stage*>(
      &::yyb::_Stage_default_instance_);
}
inline const ::yyb::Stage& GameDataRequest::stage() const {
  // @@protoc_insertion_point(field_get:yyb.GameDataRequest.stage)
  return _internal_stage();
}
inline ::yyb::Stage* GameDataRequest::release_stage() {
  // @@protoc_insertion_point(field_release:yyb.GameDataRequest.stage)
  
  ::yyb::Stage* temp = stage_;
  stage_ = nullptr;
  return temp;
}
inline ::yyb::Stage* GameDataRequest::_internal_mutable_stage() {
  
  if (stage_ == nullptr) {
    auto* p = CreateMaybeMessage<::yyb::Stage>(GetArenaNoVirtual());
    stage_ = p;
  }
  return stage_;
}
inline ::yyb::Stage* GameDataRequest::mutable_stage() {
  // @@protoc_insertion_point(field_mutable:yyb.GameDataRequest.stage)
  return _internal_mutable_stage();
}
inline void GameDataRequest::set_allocated_stage(::yyb::Stage* stage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stage_;
  }
  if (stage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stage, submessage_arena);
    }
    
  } else {
    
  }
  stage_ = stage;
  // @@protoc_insertion_point(field_set_allocated:yyb.GameDataRequest.stage)
}

// .yyb.UpgradePlayer upgradePlayer = 5;
inline bool GameDataRequest::_internal_has_upgradeplayer() const {
  return this != internal_default_instance() && upgradeplayer_ != nullptr;
}
inline bool GameDataRequest::has_upgradeplayer() const {
  return _internal_has_upgradeplayer();
}
inline void GameDataRequest::clear_upgradeplayer() {
  if (GetArenaNoVirtual() == nullptr && upgradeplayer_ != nullptr) {
    delete upgradeplayer_;
  }
  upgradeplayer_ = nullptr;
}
inline const ::yyb::UpgradePlayer& GameDataRequest::_internal_upgradeplayer() const {
  const ::yyb::UpgradePlayer* p = upgradeplayer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::yyb::UpgradePlayer*>(
      &::yyb::_UpgradePlayer_default_instance_);
}
inline const ::yyb::UpgradePlayer& GameDataRequest::upgradeplayer() const {
  // @@protoc_insertion_point(field_get:yyb.GameDataRequest.upgradePlayer)
  return _internal_upgradeplayer();
}
inline ::yyb::UpgradePlayer* GameDataRequest::release_upgradeplayer() {
  // @@protoc_insertion_point(field_release:yyb.GameDataRequest.upgradePlayer)
  
  ::yyb::UpgradePlayer* temp = upgradeplayer_;
  upgradeplayer_ = nullptr;
  return temp;
}
inline ::yyb::UpgradePlayer* GameDataRequest::_internal_mutable_upgradeplayer() {
  
  if (upgradeplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::yyb::UpgradePlayer>(GetArenaNoVirtual());
    upgradeplayer_ = p;
  }
  return upgradeplayer_;
}
inline ::yyb::UpgradePlayer* GameDataRequest::mutable_upgradeplayer() {
  // @@protoc_insertion_point(field_mutable:yyb.GameDataRequest.upgradePlayer)
  return _internal_mutable_upgradeplayer();
}
inline void GameDataRequest::set_allocated_upgradeplayer(::yyb::UpgradePlayer* upgradeplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete upgradeplayer_;
  }
  if (upgradeplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      upgradeplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upgradeplayer, submessage_arena);
    }
    
  } else {
    
  }
  upgradeplayer_ = upgradeplayer;
  // @@protoc_insertion_point(field_set_allocated:yyb.GameDataRequest.upgradePlayer)
}

// -------------------------------------------------------------------

// GameDataReply

// .yyb.ERROR_CODE error = 1;
inline void GameDataReply::clear_error() {
  error_ = 0;
}
inline ::yyb::ERROR_CODE GameDataReply::_internal_error() const {
  return static_cast< ::yyb::ERROR_CODE >(error_);
}
inline ::yyb::ERROR_CODE GameDataReply::error() const {
  // @@protoc_insertion_point(field_get:yyb.GameDataReply.error)
  return _internal_error();
}
inline void GameDataReply::_internal_set_error(::yyb::ERROR_CODE value) {
  
  error_ = value;
}
inline void GameDataReply::set_error(::yyb::ERROR_CODE value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:yyb.GameDataReply.error)
}

// repeated .yyb.Item items = 2;
inline int GameDataReply::_internal_items_size() const {
  return items_.size();
}
inline int GameDataReply::items_size() const {
  return _internal_items_size();
}
inline void GameDataReply::clear_items() {
  items_.Clear();
}
inline ::yyb::Item* GameDataReply::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:yyb.GameDataReply.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::yyb::Item >*
GameDataReply::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:yyb.GameDataReply.items)
  return &items_;
}
inline const ::yyb::Item& GameDataReply::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::yyb::Item& GameDataReply::items(int index) const {
  // @@protoc_insertion_point(field_get:yyb.GameDataReply.items)
  return _internal_items(index);
}
inline ::yyb::Item* GameDataReply::_internal_add_items() {
  return items_.Add();
}
inline ::yyb::Item* GameDataReply::add_items() {
  // @@protoc_insertion_point(field_add:yyb.GameDataReply.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::yyb::Item >&
GameDataReply::items() const {
  // @@protoc_insertion_point(field_list:yyb.GameDataReply.items)
  return items_;
}

// repeated .yyb.Mercenary mercenaries = 3;
inline int GameDataReply::_internal_mercenaries_size() const {
  return mercenaries_.size();
}
inline int GameDataReply::mercenaries_size() const {
  return _internal_mercenaries_size();
}
inline void GameDataReply::clear_mercenaries() {
  mercenaries_.Clear();
}
inline ::yyb::Mercenary* GameDataReply::mutable_mercenaries(int index) {
  // @@protoc_insertion_point(field_mutable:yyb.GameDataReply.mercenaries)
  return mercenaries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::yyb::Mercenary >*
GameDataReply::mutable_mercenaries() {
  // @@protoc_insertion_point(field_mutable_list:yyb.GameDataReply.mercenaries)
  return &mercenaries_;
}
inline const ::yyb::Mercenary& GameDataReply::_internal_mercenaries(int index) const {
  return mercenaries_.Get(index);
}
inline const ::yyb::Mercenary& GameDataReply::mercenaries(int index) const {
  // @@protoc_insertion_point(field_get:yyb.GameDataReply.mercenaries)
  return _internal_mercenaries(index);
}
inline ::yyb::Mercenary* GameDataReply::_internal_add_mercenaries() {
  return mercenaries_.Add();
}
inline ::yyb::Mercenary* GameDataReply::add_mercenaries() {
  // @@protoc_insertion_point(field_add:yyb.GameDataReply.mercenaries)
  return _internal_add_mercenaries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::yyb::Mercenary >&
GameDataReply::mercenaries() const {
  // @@protoc_insertion_point(field_list:yyb.GameDataReply.mercenaries)
  return mercenaries_;
}

// .yyb.Stage stage = 4;
inline bool GameDataReply::_internal_has_stage() const {
  return this != internal_default_instance() && stage_ != nullptr;
}
inline bool GameDataReply::has_stage() const {
  return _internal_has_stage();
}
inline void GameDataReply::clear_stage() {
  if (GetArenaNoVirtual() == nullptr && stage_ != nullptr) {
    delete stage_;
  }
  stage_ = nullptr;
}
inline const ::yyb::Stage& GameDataReply::_internal_stage() const {
  const ::yyb::Stage* p = stage_;
  return p != nullptr ? *p : *reinterpret_cast<const ::yyb::Stage*>(
      &::yyb::_Stage_default_instance_);
}
inline const ::yyb::Stage& GameDataReply::stage() const {
  // @@protoc_insertion_point(field_get:yyb.GameDataReply.stage)
  return _internal_stage();
}
inline ::yyb::Stage* GameDataReply::release_stage() {
  // @@protoc_insertion_point(field_release:yyb.GameDataReply.stage)
  
  ::yyb::Stage* temp = stage_;
  stage_ = nullptr;
  return temp;
}
inline ::yyb::Stage* GameDataReply::_internal_mutable_stage() {
  
  if (stage_ == nullptr) {
    auto* p = CreateMaybeMessage<::yyb::Stage>(GetArenaNoVirtual());
    stage_ = p;
  }
  return stage_;
}
inline ::yyb::Stage* GameDataReply::mutable_stage() {
  // @@protoc_insertion_point(field_mutable:yyb.GameDataReply.stage)
  return _internal_mutable_stage();
}
inline void GameDataReply::set_allocated_stage(::yyb::Stage* stage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stage_;
  }
  if (stage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stage, submessage_arena);
    }
    
  } else {
    
  }
  stage_ = stage;
  // @@protoc_insertion_point(field_set_allocated:yyb.GameDataReply.stage)
}

// .yyb.UpgradePlayer upgradePlayer = 5;
inline bool GameDataReply::_internal_has_upgradeplayer() const {
  return this != internal_default_instance() && upgradeplayer_ != nullptr;
}
inline bool GameDataReply::has_upgradeplayer() const {
  return _internal_has_upgradeplayer();
}
inline void GameDataReply::clear_upgradeplayer() {
  if (GetArenaNoVirtual() == nullptr && upgradeplayer_ != nullptr) {
    delete upgradeplayer_;
  }
  upgradeplayer_ = nullptr;
}
inline const ::yyb::UpgradePlayer& GameDataReply::_internal_upgradeplayer() const {
  const ::yyb::UpgradePlayer* p = upgradeplayer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::yyb::UpgradePlayer*>(
      &::yyb::_UpgradePlayer_default_instance_);
}
inline const ::yyb::UpgradePlayer& GameDataReply::upgradeplayer() const {
  // @@protoc_insertion_point(field_get:yyb.GameDataReply.upgradePlayer)
  return _internal_upgradeplayer();
}
inline ::yyb::UpgradePlayer* GameDataReply::release_upgradeplayer() {
  // @@protoc_insertion_point(field_release:yyb.GameDataReply.upgradePlayer)
  
  ::yyb::UpgradePlayer* temp = upgradeplayer_;
  upgradeplayer_ = nullptr;
  return temp;
}
inline ::yyb::UpgradePlayer* GameDataReply::_internal_mutable_upgradeplayer() {
  
  if (upgradeplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::yyb::UpgradePlayer>(GetArenaNoVirtual());
    upgradeplayer_ = p;
  }
  return upgradeplayer_;
}
inline ::yyb::UpgradePlayer* GameDataReply::mutable_upgradeplayer() {
  // @@protoc_insertion_point(field_mutable:yyb.GameDataReply.upgradePlayer)
  return _internal_mutable_upgradeplayer();
}
inline void GameDataReply::set_allocated_upgradeplayer(::yyb::UpgradePlayer* upgradeplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete upgradeplayer_;
  }
  if (upgradeplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      upgradeplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upgradeplayer, submessage_arena);
    }
    
  } else {
    
  }
  upgradeplayer_ = upgradeplayer;
  // @@protoc_insertion_point(field_set_allocated:yyb.GameDataReply.upgradePlayer)
}

// -------------------------------------------------------------------

// RankingRequest

// int64 score = 1;
inline void RankingRequest::clear_score() {
  score_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RankingRequest::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RankingRequest::score() const {
  // @@protoc_insertion_point(field_get:yyb.RankingRequest.score)
  return _internal_score();
}
inline void RankingRequest::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  score_ = value;
}
inline void RankingRequest::set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:yyb.RankingRequest.score)
}

// -------------------------------------------------------------------

// RankingReply

// .yyb.ERROR_CODE error = 1;
inline void RankingReply::clear_error() {
  error_ = 0;
}
inline ::yyb::ERROR_CODE RankingReply::_internal_error() const {
  return static_cast< ::yyb::ERROR_CODE >(error_);
}
inline ::yyb::ERROR_CODE RankingReply::error() const {
  // @@protoc_insertion_point(field_get:yyb.RankingReply.error)
  return _internal_error();
}
inline void RankingReply::_internal_set_error(::yyb::ERROR_CODE value) {
  
  error_ = value;
}
inline void RankingReply::set_error(::yyb::ERROR_CODE value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:yyb.RankingReply.error)
}

// -------------------------------------------------------------------

// RankingListRequest

// -------------------------------------------------------------------

// RankingListReply_Ranking

// string nickName = 1;
inline void RankingListReply_Ranking::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RankingListReply_Ranking::nickname() const {
  // @@protoc_insertion_point(field_get:yyb.RankingListReply.Ranking.nickName)
  return _internal_nickname();
}
inline void RankingListReply_Ranking::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:yyb.RankingListReply.Ranking.nickName)
}
inline std::string* RankingListReply_Ranking::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:yyb.RankingListReply.Ranking.nickName)
  return _internal_mutable_nickname();
}
inline const std::string& RankingListReply_Ranking::_internal_nickname() const {
  return nickname_.GetNoArena();
}
inline void RankingListReply_Ranking::_internal_set_nickname(const std::string& value) {
  
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RankingListReply_Ranking::set_nickname(std::string&& value) {
  
  nickname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yyb.RankingListReply.Ranking.nickName)
}
inline void RankingListReply_Ranking::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yyb.RankingListReply.Ranking.nickName)
}
inline void RankingListReply_Ranking::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yyb.RankingListReply.Ranking.nickName)
}
inline std::string* RankingListReply_Ranking::_internal_mutable_nickname() {
  
  return nickname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RankingListReply_Ranking::release_nickname() {
  // @@protoc_insertion_point(field_release:yyb.RankingListReply.Ranking.nickName)
  
  return nickname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RankingListReply_Ranking::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:yyb.RankingListReply.Ranking.nickName)
}

// int32 rank = 2;
inline void RankingListReply_Ranking::clear_rank() {
  rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankingListReply_Ranking::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankingListReply_Ranking::rank() const {
  // @@protoc_insertion_point(field_get:yyb.RankingListReply.Ranking.rank)
  return _internal_rank();
}
inline void RankingListReply_Ranking::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rank_ = value;
}
inline void RankingListReply_Ranking::set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:yyb.RankingListReply.Ranking.rank)
}

// int32 score = 3;
inline void RankingListReply_Ranking::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankingListReply_Ranking::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankingListReply_Ranking::score() const {
  // @@protoc_insertion_point(field_get:yyb.RankingListReply.Ranking.score)
  return _internal_score();
}
inline void RankingListReply_Ranking::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void RankingListReply_Ranking::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:yyb.RankingListReply.Ranking.score)
}

// -------------------------------------------------------------------

// RankingListReply

// .yyb.ERROR_CODE error = 1;
inline void RankingListReply::clear_error() {
  error_ = 0;
}
inline ::yyb::ERROR_CODE RankingListReply::_internal_error() const {
  return static_cast< ::yyb::ERROR_CODE >(error_);
}
inline ::yyb::ERROR_CODE RankingListReply::error() const {
  // @@protoc_insertion_point(field_get:yyb.RankingListReply.error)
  return _internal_error();
}
inline void RankingListReply::_internal_set_error(::yyb::ERROR_CODE value) {
  
  error_ = value;
}
inline void RankingListReply::set_error(::yyb::ERROR_CODE value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:yyb.RankingListReply.error)
}

// .yyb.RankingListReply.Ranking myRanking = 2;
inline bool RankingListReply::_internal_has_myranking() const {
  return this != internal_default_instance() && myranking_ != nullptr;
}
inline bool RankingListReply::has_myranking() const {
  return _internal_has_myranking();
}
inline void RankingListReply::clear_myranking() {
  if (GetArenaNoVirtual() == nullptr && myranking_ != nullptr) {
    delete myranking_;
  }
  myranking_ = nullptr;
}
inline const ::yyb::RankingListReply_Ranking& RankingListReply::_internal_myranking() const {
  const ::yyb::RankingListReply_Ranking* p = myranking_;
  return p != nullptr ? *p : *reinterpret_cast<const ::yyb::RankingListReply_Ranking*>(
      &::yyb::_RankingListReply_Ranking_default_instance_);
}
inline const ::yyb::RankingListReply_Ranking& RankingListReply::myranking() const {
  // @@protoc_insertion_point(field_get:yyb.RankingListReply.myRanking)
  return _internal_myranking();
}
inline ::yyb::RankingListReply_Ranking* RankingListReply::release_myranking() {
  // @@protoc_insertion_point(field_release:yyb.RankingListReply.myRanking)
  
  ::yyb::RankingListReply_Ranking* temp = myranking_;
  myranking_ = nullptr;
  return temp;
}
inline ::yyb::RankingListReply_Ranking* RankingListReply::_internal_mutable_myranking() {
  
  if (myranking_ == nullptr) {
    auto* p = CreateMaybeMessage<::yyb::RankingListReply_Ranking>(GetArenaNoVirtual());
    myranking_ = p;
  }
  return myranking_;
}
inline ::yyb::RankingListReply_Ranking* RankingListReply::mutable_myranking() {
  // @@protoc_insertion_point(field_mutable:yyb.RankingListReply.myRanking)
  return _internal_mutable_myranking();
}
inline void RankingListReply::set_allocated_myranking(::yyb::RankingListReply_Ranking* myranking) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete myranking_;
  }
  if (myranking) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      myranking = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, myranking, submessage_arena);
    }
    
  } else {
    
  }
  myranking_ = myranking;
  // @@protoc_insertion_point(field_set_allocated:yyb.RankingListReply.myRanking)
}

// repeated .yyb.RankingListReply.Ranking rankings = 3;
inline int RankingListReply::_internal_rankings_size() const {
  return rankings_.size();
}
inline int RankingListReply::rankings_size() const {
  return _internal_rankings_size();
}
inline void RankingListReply::clear_rankings() {
  rankings_.Clear();
}
inline ::yyb::RankingListReply_Ranking* RankingListReply::mutable_rankings(int index) {
  // @@protoc_insertion_point(field_mutable:yyb.RankingListReply.rankings)
  return rankings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::yyb::RankingListReply_Ranking >*
RankingListReply::mutable_rankings() {
  // @@protoc_insertion_point(field_mutable_list:yyb.RankingListReply.rankings)
  return &rankings_;
}
inline const ::yyb::RankingListReply_Ranking& RankingListReply::_internal_rankings(int index) const {
  return rankings_.Get(index);
}
inline const ::yyb::RankingListReply_Ranking& RankingListReply::rankings(int index) const {
  // @@protoc_insertion_point(field_get:yyb.RankingListReply.rankings)
  return _internal_rankings(index);
}
inline ::yyb::RankingListReply_Ranking* RankingListReply::_internal_add_rankings() {
  return rankings_.Add();
}
inline ::yyb::RankingListReply_Ranking* RankingListReply::add_rankings() {
  // @@protoc_insertion_point(field_add:yyb.RankingListReply.rankings)
  return _internal_add_rankings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::yyb::RankingListReply_Ranking >&
RankingListReply::rankings() const {
  // @@protoc_insertion_point(field_list:yyb.RankingListReply.rankings)
  return rankings_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace yyb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::yyb::LoginRequest_LOGIN_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::yyb::LoginRequest_LOGIN_TYPE>() {
  return ::yyb::LoginRequest_LOGIN_TYPE_descriptor();
}
template <> struct is_proto_enum< ::yyb::ERROR_CODE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::yyb::ERROR_CODE>() {
  return ::yyb::ERROR_CODE_descriptor();
}
template <> struct is_proto_enum< ::yyb::ITEM_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::yyb::ITEM_TYPE>() {
  return ::yyb::ITEM_TYPE_descriptor();
}
template <> struct is_proto_enum< ::yyb::ITEM_CATEGORY> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::yyb::ITEM_CATEGORY>() {
  return ::yyb::ITEM_CATEGORY_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpc_5fservice_2eproto
