// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpc_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpc_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_5fservice_2eproto;
namespace yyb {
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class LoginReply;
class LoginReplyDefaultTypeInternal;
extern LoginReplyDefaultTypeInternal _LoginReply_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class PushNotification;
class PushNotificationDefaultTypeInternal;
extern PushNotificationDefaultTypeInternal _PushNotification_default_instance_;
class RpcServiceExampleReply;
class RpcServiceExampleReplyDefaultTypeInternal;
extern RpcServiceExampleReplyDefaultTypeInternal _RpcServiceExampleReply_default_instance_;
class RpcServiceExampleRequest;
class RpcServiceExampleRequestDefaultTypeInternal;
extern RpcServiceExampleRequestDefaultTypeInternal _RpcServiceExampleRequest_default_instance_;
}  // namespace yyb
PROTOBUF_NAMESPACE_OPEN
template<> ::yyb::Empty* Arena::CreateMaybeMessage<::yyb::Empty>(Arena*);
template<> ::yyb::LoginReply* Arena::CreateMaybeMessage<::yyb::LoginReply>(Arena*);
template<> ::yyb::LoginRequest* Arena::CreateMaybeMessage<::yyb::LoginRequest>(Arena*);
template<> ::yyb::PushNotification* Arena::CreateMaybeMessage<::yyb::PushNotification>(Arena*);
template<> ::yyb::RpcServiceExampleReply* Arena::CreateMaybeMessage<::yyb::RpcServiceExampleReply>(Arena*);
template<> ::yyb::RpcServiceExampleRequest* Arena::CreateMaybeMessage<::yyb::RpcServiceExampleRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace yyb {

enum LoginRequest_LOGIN_TYPE : int {
  LoginRequest_LOGIN_TYPE_LOGIN_TYPE_NON_CERT = 0,
  LoginRequest_LOGIN_TYPE_LOGIN_TYPE_GOOGLE = 1,
  LoginRequest_LOGIN_TYPE_LOGIN_TYPE_FACEBOOK = 2,
  LoginRequest_LOGIN_TYPE_LoginRequest_LOGIN_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LoginRequest_LOGIN_TYPE_LoginRequest_LOGIN_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LoginRequest_LOGIN_TYPE_IsValid(int value);
constexpr LoginRequest_LOGIN_TYPE LoginRequest_LOGIN_TYPE_LOGIN_TYPE_MIN = LoginRequest_LOGIN_TYPE_LOGIN_TYPE_NON_CERT;
constexpr LoginRequest_LOGIN_TYPE LoginRequest_LOGIN_TYPE_LOGIN_TYPE_MAX = LoginRequest_LOGIN_TYPE_LOGIN_TYPE_FACEBOOK;
constexpr int LoginRequest_LOGIN_TYPE_LOGIN_TYPE_ARRAYSIZE = LoginRequest_LOGIN_TYPE_LOGIN_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginRequest_LOGIN_TYPE_descriptor();
template<typename T>
inline const std::string& LoginRequest_LOGIN_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginRequest_LOGIN_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginRequest_LOGIN_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginRequest_LOGIN_TYPE_descriptor(), enum_t_value);
}
inline bool LoginRequest_LOGIN_TYPE_Parse(
    const std::string& name, LoginRequest_LOGIN_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginRequest_LOGIN_TYPE>(
    LoginRequest_LOGIN_TYPE_descriptor(), name, value);
}
enum LoginReply_ERROR_CODE : int {
  LoginReply_ERROR_CODE_ERROR_CODE_OK = 0,
  LoginReply_ERROR_CODE_ERROR_CODE_EMPTY_NICKNAME = 1,
  LoginReply_ERROR_CODE_ERROR_CODE_DUP_NICKNAME = 2,
  LoginReply_ERROR_CODE_ERROR_CODE_NICKNAME_HAVE_SPECIAL_CHARACTERS = 3,
  LoginReply_ERROR_CODE_ERROR_CODE_UNABLE_TO_CREATE_USER = 4,
  LoginReply_ERROR_CODE_ERROR_CODE_FAILED_TO_ACQUIRE_USER_INFO = 5,
  LoginReply_ERROR_CODE_ERROR_CODE_GOOGLE_AUTH_FAILED = 6,
  LoginReply_ERROR_CODE_ERROR_CODE_EMPTY_ID_TOKEN = 7,
  LoginReply_ERROR_CODE_LoginReply_ERROR_CODE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LoginReply_ERROR_CODE_LoginReply_ERROR_CODE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LoginReply_ERROR_CODE_IsValid(int value);
constexpr LoginReply_ERROR_CODE LoginReply_ERROR_CODE_ERROR_CODE_MIN = LoginReply_ERROR_CODE_ERROR_CODE_OK;
constexpr LoginReply_ERROR_CODE LoginReply_ERROR_CODE_ERROR_CODE_MAX = LoginReply_ERROR_CODE_ERROR_CODE_EMPTY_ID_TOKEN;
constexpr int LoginReply_ERROR_CODE_ERROR_CODE_ARRAYSIZE = LoginReply_ERROR_CODE_ERROR_CODE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginReply_ERROR_CODE_descriptor();
template<typename T>
inline const std::string& LoginReply_ERROR_CODE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginReply_ERROR_CODE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginReply_ERROR_CODE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginReply_ERROR_CODE_descriptor(), enum_t_value);
}
inline bool LoginReply_ERROR_CODE_Parse(
    const std::string& name, LoginReply_ERROR_CODE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginReply_ERROR_CODE>(
    LoginReply_ERROR_CODE_descriptor(), name, value);
}
// ===================================================================

class RpcServiceExampleRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yyb.RpcServiceExampleRequest) */ {
 public:
  RpcServiceExampleRequest();
  virtual ~RpcServiceExampleRequest();

  RpcServiceExampleRequest(const RpcServiceExampleRequest& from);
  RpcServiceExampleRequest(RpcServiceExampleRequest&& from) noexcept
    : RpcServiceExampleRequest() {
    *this = ::std::move(from);
  }

  inline RpcServiceExampleRequest& operator=(const RpcServiceExampleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcServiceExampleRequest& operator=(RpcServiceExampleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RpcServiceExampleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcServiceExampleRequest* internal_default_instance() {
    return reinterpret_cast<const RpcServiceExampleRequest*>(
               &_RpcServiceExampleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RpcServiceExampleRequest& a, RpcServiceExampleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcServiceExampleRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RpcServiceExampleRequest* New() const final {
    return CreateMaybeMessage<RpcServiceExampleRequest>(nullptr);
  }

  RpcServiceExampleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RpcServiceExampleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RpcServiceExampleRequest& from);
  void MergeFrom(const RpcServiceExampleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcServiceExampleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yyb.RpcServiceExampleRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fservice_2eproto);
    return ::descriptor_table_rpc_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArg5FieldNumber = 5,
    kArg3FieldNumber = 3,
    kArg1FieldNumber = 1,
    kArg2FieldNumber = 2,
    kArg4FieldNumber = 4,
  };
  // repeated int32 arg5 = 5;
  int arg5_size() const;
  private:
  int _internal_arg5_size() const;
  public:
  void clear_arg5();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_arg5(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_arg5() const;
  void _internal_add_arg5(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_arg5();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 arg5(int index) const;
  void set_arg5(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_arg5(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      arg5() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_arg5();

  // string arg3 = 3;
  void clear_arg3();
  const std::string& arg3() const;
  void set_arg3(const std::string& value);
  void set_arg3(std::string&& value);
  void set_arg3(const char* value);
  void set_arg3(const char* value, size_t size);
  std::string* mutable_arg3();
  std::string* release_arg3();
  void set_allocated_arg3(std::string* arg3);
  private:
  const std::string& _internal_arg3() const;
  void _internal_set_arg3(const std::string& value);
  std::string* _internal_mutable_arg3();
  public:

  // int32 arg1 = 1;
  void clear_arg1();
  ::PROTOBUF_NAMESPACE_ID::int32 arg1() const;
  void set_arg1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_arg1() const;
  void _internal_set_arg1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float arg2 = 2;
  void clear_arg2();
  float arg2() const;
  void set_arg2(float value);
  private:
  float _internal_arg2() const;
  void _internal_set_arg2(float value);
  public:

  // bool arg4 = 4;
  void clear_arg4();
  bool arg4() const;
  void set_arg4(bool value);
  private:
  bool _internal_arg4() const;
  void _internal_set_arg4(bool value);
  public:

  // @@protoc_insertion_point(class_scope:yyb.RpcServiceExampleRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > arg5_;
  mutable std::atomic<int> _arg5_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr arg3_;
  ::PROTOBUF_NAMESPACE_ID::int32 arg1_;
  float arg2_;
  bool arg4_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RpcServiceExampleReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yyb.RpcServiceExampleReply) */ {
 public:
  RpcServiceExampleReply();
  virtual ~RpcServiceExampleReply();

  RpcServiceExampleReply(const RpcServiceExampleReply& from);
  RpcServiceExampleReply(RpcServiceExampleReply&& from) noexcept
    : RpcServiceExampleReply() {
    *this = ::std::move(from);
  }

  inline RpcServiceExampleReply& operator=(const RpcServiceExampleReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcServiceExampleReply& operator=(RpcServiceExampleReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RpcServiceExampleReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcServiceExampleReply* internal_default_instance() {
    return reinterpret_cast<const RpcServiceExampleReply*>(
               &_RpcServiceExampleReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RpcServiceExampleReply& a, RpcServiceExampleReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcServiceExampleReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RpcServiceExampleReply* New() const final {
    return CreateMaybeMessage<RpcServiceExampleReply>(nullptr);
  }

  RpcServiceExampleReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RpcServiceExampleReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RpcServiceExampleReply& from);
  void MergeFrom(const RpcServiceExampleReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcServiceExampleReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yyb.RpcServiceExampleReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fservice_2eproto);
    return ::descriptor_table_rpc_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // string error = 1;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:yyb.RpcServiceExampleReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Empty :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yyb.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yyb.Empty";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fservice_2eproto);
    return ::descriptor_table_rpc_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:yyb.Empty)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PushNotification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yyb.PushNotification) */ {
 public:
  PushNotification();
  virtual ~PushNotification();

  PushNotification(const PushNotification& from);
  PushNotification(PushNotification&& from) noexcept
    : PushNotification() {
    *this = ::std::move(from);
  }

  inline PushNotification& operator=(const PushNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushNotification& operator=(PushNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PushNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PushNotification* internal_default_instance() {
    return reinterpret_cast<const PushNotification*>(
               &_PushNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PushNotification& a, PushNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(PushNotification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PushNotification* New() const final {
    return CreateMaybeMessage<PushNotification>(nullptr);
  }

  PushNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PushNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PushNotification& from);
  void MergeFrom(const PushNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yyb.PushNotification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fservice_2eproto);
    return ::descriptor_table_rpc_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 1,
  };
  // string payload = 1;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const char* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:yyb.PushNotification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LoginRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yyb.LoginRequest) */ {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return CreateMaybeMessage<LoginRequest>(nullptr);
  }

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yyb.LoginRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fservice_2eproto);
    return ::descriptor_table_rpc_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LoginRequest_LOGIN_TYPE LOGIN_TYPE;
  static constexpr LOGIN_TYPE LOGIN_TYPE_NON_CERT =
    LoginRequest_LOGIN_TYPE_LOGIN_TYPE_NON_CERT;
  static constexpr LOGIN_TYPE LOGIN_TYPE_GOOGLE =
    LoginRequest_LOGIN_TYPE_LOGIN_TYPE_GOOGLE;
  static constexpr LOGIN_TYPE LOGIN_TYPE_FACEBOOK =
    LoginRequest_LOGIN_TYPE_LOGIN_TYPE_FACEBOOK;
  static inline bool LOGIN_TYPE_IsValid(int value) {
    return LoginRequest_LOGIN_TYPE_IsValid(value);
  }
  static constexpr LOGIN_TYPE LOGIN_TYPE_MIN =
    LoginRequest_LOGIN_TYPE_LOGIN_TYPE_MIN;
  static constexpr LOGIN_TYPE LOGIN_TYPE_MAX =
    LoginRequest_LOGIN_TYPE_LOGIN_TYPE_MAX;
  static constexpr int LOGIN_TYPE_ARRAYSIZE =
    LoginRequest_LOGIN_TYPE_LOGIN_TYPE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LOGIN_TYPE_descriptor() {
    return LoginRequest_LOGIN_TYPE_descriptor();
  }
  template<typename T>
  static inline const std::string& LOGIN_TYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LOGIN_TYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LOGIN_TYPE_Name.");
    return LoginRequest_LOGIN_TYPE_Name(enum_t_value);
  }
  static inline bool LOGIN_TYPE_Parse(const std::string& name,
      LOGIN_TYPE* value) {
    return LoginRequest_LOGIN_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLoginKeyFieldNumber = 2,
    kIdTokenFieldNumber = 3,
    kNickNameFieldNumber = 4,
    kLoginTypeFieldNumber = 1,
  };
  // string loginKey = 2;
  void clear_loginkey();
  const std::string& loginkey() const;
  void set_loginkey(const std::string& value);
  void set_loginkey(std::string&& value);
  void set_loginkey(const char* value);
  void set_loginkey(const char* value, size_t size);
  std::string* mutable_loginkey();
  std::string* release_loginkey();
  void set_allocated_loginkey(std::string* loginkey);
  private:
  const std::string& _internal_loginkey() const;
  void _internal_set_loginkey(const std::string& value);
  std::string* _internal_mutable_loginkey();
  public:

  // string idToken = 3;
  void clear_idtoken();
  const std::string& idtoken() const;
  void set_idtoken(const std::string& value);
  void set_idtoken(std::string&& value);
  void set_idtoken(const char* value);
  void set_idtoken(const char* value, size_t size);
  std::string* mutable_idtoken();
  std::string* release_idtoken();
  void set_allocated_idtoken(std::string* idtoken);
  private:
  const std::string& _internal_idtoken() const;
  void _internal_set_idtoken(const std::string& value);
  std::string* _internal_mutable_idtoken();
  public:

  // string nickName = 4;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // .yyb.LoginRequest.LOGIN_TYPE loginType = 1;
  void clear_logintype();
  ::yyb::LoginRequest_LOGIN_TYPE logintype() const;
  void set_logintype(::yyb::LoginRequest_LOGIN_TYPE value);
  private:
  ::yyb::LoginRequest_LOGIN_TYPE _internal_logintype() const;
  void _internal_set_logintype(::yyb::LoginRequest_LOGIN_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:yyb.LoginRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loginkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idtoken_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  int logintype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LoginReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yyb.LoginReply) */ {
 public:
  LoginReply();
  virtual ~LoginReply();

  LoginReply(const LoginReply& from);
  LoginReply(LoginReply&& from) noexcept
    : LoginReply() {
    *this = ::std::move(from);
  }

  inline LoginReply& operator=(const LoginReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReply& operator=(LoginReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginReply* internal_default_instance() {
    return reinterpret_cast<const LoginReply*>(
               &_LoginReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LoginReply& a, LoginReply& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginReply* New() const final {
    return CreateMaybeMessage<LoginReply>(nullptr);
  }

  LoginReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginReply& from);
  void MergeFrom(const LoginReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yyb.LoginReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_5fservice_2eproto);
    return ::descriptor_table_rpc_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LoginReply_ERROR_CODE ERROR_CODE;
  static constexpr ERROR_CODE ERROR_CODE_OK =
    LoginReply_ERROR_CODE_ERROR_CODE_OK;
  static constexpr ERROR_CODE ERROR_CODE_EMPTY_NICKNAME =
    LoginReply_ERROR_CODE_ERROR_CODE_EMPTY_NICKNAME;
  static constexpr ERROR_CODE ERROR_CODE_DUP_NICKNAME =
    LoginReply_ERROR_CODE_ERROR_CODE_DUP_NICKNAME;
  static constexpr ERROR_CODE ERROR_CODE_NICKNAME_HAVE_SPECIAL_CHARACTERS =
    LoginReply_ERROR_CODE_ERROR_CODE_NICKNAME_HAVE_SPECIAL_CHARACTERS;
  static constexpr ERROR_CODE ERROR_CODE_UNABLE_TO_CREATE_USER =
    LoginReply_ERROR_CODE_ERROR_CODE_UNABLE_TO_CREATE_USER;
  static constexpr ERROR_CODE ERROR_CODE_FAILED_TO_ACQUIRE_USER_INFO =
    LoginReply_ERROR_CODE_ERROR_CODE_FAILED_TO_ACQUIRE_USER_INFO;
  static constexpr ERROR_CODE ERROR_CODE_GOOGLE_AUTH_FAILED =
    LoginReply_ERROR_CODE_ERROR_CODE_GOOGLE_AUTH_FAILED;
  static constexpr ERROR_CODE ERROR_CODE_EMPTY_ID_TOKEN =
    LoginReply_ERROR_CODE_ERROR_CODE_EMPTY_ID_TOKEN;
  static inline bool ERROR_CODE_IsValid(int value) {
    return LoginReply_ERROR_CODE_IsValid(value);
  }
  static constexpr ERROR_CODE ERROR_CODE_MIN =
    LoginReply_ERROR_CODE_ERROR_CODE_MIN;
  static constexpr ERROR_CODE ERROR_CODE_MAX =
    LoginReply_ERROR_CODE_ERROR_CODE_MAX;
  static constexpr int ERROR_CODE_ARRAYSIZE =
    LoginReply_ERROR_CODE_ERROR_CODE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ERROR_CODE_descriptor() {
    return LoginReply_ERROR_CODE_descriptor();
  }
  template<typename T>
  static inline const std::string& ERROR_CODE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ERROR_CODE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ERROR_CODE_Name.");
    return LoginReply_ERROR_CODE_Name(enum_t_value);
  }
  static inline bool ERROR_CODE_Parse(const std::string& name,
      ERROR_CODE* value) {
    return LoginReply_ERROR_CODE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLoginKeyFieldNumber = 3,
    kNickNameFieldNumber = 4,
    kErrorFieldNumber = 1,
    kUsnFieldNumber = 2,
  };
  // string loginKey = 3;
  void clear_loginkey();
  const std::string& loginkey() const;
  void set_loginkey(const std::string& value);
  void set_loginkey(std::string&& value);
  void set_loginkey(const char* value);
  void set_loginkey(const char* value, size_t size);
  std::string* mutable_loginkey();
  std::string* release_loginkey();
  void set_allocated_loginkey(std::string* loginkey);
  private:
  const std::string& _internal_loginkey() const;
  void _internal_set_loginkey(const std::string& value);
  std::string* _internal_mutable_loginkey();
  public:

  // string nickName = 4;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // .yyb.LoginReply.ERROR_CODE error = 1;
  void clear_error();
  ::yyb::LoginReply_ERROR_CODE error() const;
  void set_error(::yyb::LoginReply_ERROR_CODE value);
  private:
  ::yyb::LoginReply_ERROR_CODE _internal_error() const;
  void _internal_set_error(::yyb::LoginReply_ERROR_CODE value);
  public:

  // int32 usn = 2;
  void clear_usn();
  ::PROTOBUF_NAMESPACE_ID::int32 usn() const;
  void set_usn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_usn() const;
  void _internal_set_usn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:yyb.LoginReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loginkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  int error_;
  ::PROTOBUF_NAMESPACE_ID::int32 usn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RpcServiceExampleRequest

// int32 arg1 = 1;
inline void RpcServiceExampleRequest::clear_arg1() {
  arg1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RpcServiceExampleRequest::_internal_arg1() const {
  return arg1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RpcServiceExampleRequest::arg1() const {
  // @@protoc_insertion_point(field_get:yyb.RpcServiceExampleRequest.arg1)
  return _internal_arg1();
}
inline void RpcServiceExampleRequest::_internal_set_arg1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  arg1_ = value;
}
inline void RpcServiceExampleRequest::set_arg1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_arg1(value);
  // @@protoc_insertion_point(field_set:yyb.RpcServiceExampleRequest.arg1)
}

// float arg2 = 2;
inline void RpcServiceExampleRequest::clear_arg2() {
  arg2_ = 0;
}
inline float RpcServiceExampleRequest::_internal_arg2() const {
  return arg2_;
}
inline float RpcServiceExampleRequest::arg2() const {
  // @@protoc_insertion_point(field_get:yyb.RpcServiceExampleRequest.arg2)
  return _internal_arg2();
}
inline void RpcServiceExampleRequest::_internal_set_arg2(float value) {
  
  arg2_ = value;
}
inline void RpcServiceExampleRequest::set_arg2(float value) {
  _internal_set_arg2(value);
  // @@protoc_insertion_point(field_set:yyb.RpcServiceExampleRequest.arg2)
}

// string arg3 = 3;
inline void RpcServiceExampleRequest::clear_arg3() {
  arg3_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RpcServiceExampleRequest::arg3() const {
  // @@protoc_insertion_point(field_get:yyb.RpcServiceExampleRequest.arg3)
  return _internal_arg3();
}
inline void RpcServiceExampleRequest::set_arg3(const std::string& value) {
  _internal_set_arg3(value);
  // @@protoc_insertion_point(field_set:yyb.RpcServiceExampleRequest.arg3)
}
inline std::string* RpcServiceExampleRequest::mutable_arg3() {
  // @@protoc_insertion_point(field_mutable:yyb.RpcServiceExampleRequest.arg3)
  return _internal_mutable_arg3();
}
inline const std::string& RpcServiceExampleRequest::_internal_arg3() const {
  return arg3_.GetNoArena();
}
inline void RpcServiceExampleRequest::_internal_set_arg3(const std::string& value) {
  
  arg3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RpcServiceExampleRequest::set_arg3(std::string&& value) {
  
  arg3_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yyb.RpcServiceExampleRequest.arg3)
}
inline void RpcServiceExampleRequest::set_arg3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  arg3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yyb.RpcServiceExampleRequest.arg3)
}
inline void RpcServiceExampleRequest::set_arg3(const char* value, size_t size) {
  
  arg3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yyb.RpcServiceExampleRequest.arg3)
}
inline std::string* RpcServiceExampleRequest::_internal_mutable_arg3() {
  
  return arg3_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RpcServiceExampleRequest::release_arg3() {
  // @@protoc_insertion_point(field_release:yyb.RpcServiceExampleRequest.arg3)
  
  return arg3_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RpcServiceExampleRequest::set_allocated_arg3(std::string* arg3) {
  if (arg3 != nullptr) {
    
  } else {
    
  }
  arg3_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), arg3);
  // @@protoc_insertion_point(field_set_allocated:yyb.RpcServiceExampleRequest.arg3)
}

// bool arg4 = 4;
inline void RpcServiceExampleRequest::clear_arg4() {
  arg4_ = false;
}
inline bool RpcServiceExampleRequest::_internal_arg4() const {
  return arg4_;
}
inline bool RpcServiceExampleRequest::arg4() const {
  // @@protoc_insertion_point(field_get:yyb.RpcServiceExampleRequest.arg4)
  return _internal_arg4();
}
inline void RpcServiceExampleRequest::_internal_set_arg4(bool value) {
  
  arg4_ = value;
}
inline void RpcServiceExampleRequest::set_arg4(bool value) {
  _internal_set_arg4(value);
  // @@protoc_insertion_point(field_set:yyb.RpcServiceExampleRequest.arg4)
}

// repeated int32 arg5 = 5;
inline int RpcServiceExampleRequest::_internal_arg5_size() const {
  return arg5_.size();
}
inline int RpcServiceExampleRequest::arg5_size() const {
  return _internal_arg5_size();
}
inline void RpcServiceExampleRequest::clear_arg5() {
  arg5_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RpcServiceExampleRequest::_internal_arg5(int index) const {
  return arg5_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RpcServiceExampleRequest::arg5(int index) const {
  // @@protoc_insertion_point(field_get:yyb.RpcServiceExampleRequest.arg5)
  return _internal_arg5(index);
}
inline void RpcServiceExampleRequest::set_arg5(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  arg5_.Set(index, value);
  // @@protoc_insertion_point(field_set:yyb.RpcServiceExampleRequest.arg5)
}
inline void RpcServiceExampleRequest::_internal_add_arg5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  arg5_.Add(value);
}
inline void RpcServiceExampleRequest::add_arg5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_arg5(value);
  // @@protoc_insertion_point(field_add:yyb.RpcServiceExampleRequest.arg5)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RpcServiceExampleRequest::_internal_arg5() const {
  return arg5_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
RpcServiceExampleRequest::arg5() const {
  // @@protoc_insertion_point(field_list:yyb.RpcServiceExampleRequest.arg5)
  return _internal_arg5();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RpcServiceExampleRequest::_internal_mutable_arg5() {
  return &arg5_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
RpcServiceExampleRequest::mutable_arg5() {
  // @@protoc_insertion_point(field_mutable_list:yyb.RpcServiceExampleRequest.arg5)
  return _internal_mutable_arg5();
}

// -------------------------------------------------------------------

// RpcServiceExampleReply

// string error = 1;
inline void RpcServiceExampleReply::clear_error() {
  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RpcServiceExampleReply::error() const {
  // @@protoc_insertion_point(field_get:yyb.RpcServiceExampleReply.error)
  return _internal_error();
}
inline void RpcServiceExampleReply::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:yyb.RpcServiceExampleReply.error)
}
inline std::string* RpcServiceExampleReply::mutable_error() {
  // @@protoc_insertion_point(field_mutable:yyb.RpcServiceExampleReply.error)
  return _internal_mutable_error();
}
inline const std::string& RpcServiceExampleReply::_internal_error() const {
  return error_.GetNoArena();
}
inline void RpcServiceExampleReply::_internal_set_error(const std::string& value) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RpcServiceExampleReply::set_error(std::string&& value) {
  
  error_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yyb.RpcServiceExampleReply.error)
}
inline void RpcServiceExampleReply::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yyb.RpcServiceExampleReply.error)
}
inline void RpcServiceExampleReply::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yyb.RpcServiceExampleReply.error)
}
inline std::string* RpcServiceExampleReply::_internal_mutable_error() {
  
  return error_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RpcServiceExampleReply::release_error() {
  // @@protoc_insertion_point(field_release:yyb.RpcServiceExampleReply.error)
  
  return error_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RpcServiceExampleReply::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:yyb.RpcServiceExampleReply.error)
}

// -------------------------------------------------------------------

// Empty

// -------------------------------------------------------------------

// PushNotification

// string payload = 1;
inline void PushNotification::clear_payload() {
  payload_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PushNotification::payload() const {
  // @@protoc_insertion_point(field_get:yyb.PushNotification.payload)
  return _internal_payload();
}
inline void PushNotification::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:yyb.PushNotification.payload)
}
inline std::string* PushNotification::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:yyb.PushNotification.payload)
  return _internal_mutable_payload();
}
inline const std::string& PushNotification::_internal_payload() const {
  return payload_.GetNoArena();
}
inline void PushNotification::_internal_set_payload(const std::string& value) {
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PushNotification::set_payload(std::string&& value) {
  
  payload_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yyb.PushNotification.payload)
}
inline void PushNotification::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yyb.PushNotification.payload)
}
inline void PushNotification::set_payload(const char* value, size_t size) {
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yyb.PushNotification.payload)
}
inline std::string* PushNotification::_internal_mutable_payload() {
  
  return payload_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PushNotification::release_payload() {
  // @@protoc_insertion_point(field_release:yyb.PushNotification.payload)
  
  return payload_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PushNotification::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:yyb.PushNotification.payload)
}

// -------------------------------------------------------------------

// LoginRequest

// .yyb.LoginRequest.LOGIN_TYPE loginType = 1;
inline void LoginRequest::clear_logintype() {
  logintype_ = 0;
}
inline ::yyb::LoginRequest_LOGIN_TYPE LoginRequest::_internal_logintype() const {
  return static_cast< ::yyb::LoginRequest_LOGIN_TYPE >(logintype_);
}
inline ::yyb::LoginRequest_LOGIN_TYPE LoginRequest::logintype() const {
  // @@protoc_insertion_point(field_get:yyb.LoginRequest.loginType)
  return _internal_logintype();
}
inline void LoginRequest::_internal_set_logintype(::yyb::LoginRequest_LOGIN_TYPE value) {
  
  logintype_ = value;
}
inline void LoginRequest::set_logintype(::yyb::LoginRequest_LOGIN_TYPE value) {
  _internal_set_logintype(value);
  // @@protoc_insertion_point(field_set:yyb.LoginRequest.loginType)
}

// string loginKey = 2;
inline void LoginRequest::clear_loginkey() {
  loginkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRequest::loginkey() const {
  // @@protoc_insertion_point(field_get:yyb.LoginRequest.loginKey)
  return _internal_loginkey();
}
inline void LoginRequest::set_loginkey(const std::string& value) {
  _internal_set_loginkey(value);
  // @@protoc_insertion_point(field_set:yyb.LoginRequest.loginKey)
}
inline std::string* LoginRequest::mutable_loginkey() {
  // @@protoc_insertion_point(field_mutable:yyb.LoginRequest.loginKey)
  return _internal_mutable_loginkey();
}
inline const std::string& LoginRequest::_internal_loginkey() const {
  return loginkey_.GetNoArena();
}
inline void LoginRequest::_internal_set_loginkey(const std::string& value) {
  
  loginkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginRequest::set_loginkey(std::string&& value) {
  
  loginkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yyb.LoginRequest.loginKey)
}
inline void LoginRequest::set_loginkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  loginkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yyb.LoginRequest.loginKey)
}
inline void LoginRequest::set_loginkey(const char* value, size_t size) {
  
  loginkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yyb.LoginRequest.loginKey)
}
inline std::string* LoginRequest::_internal_mutable_loginkey() {
  
  return loginkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRequest::release_loginkey() {
  // @@protoc_insertion_point(field_release:yyb.LoginRequest.loginKey)
  
  return loginkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_loginkey(std::string* loginkey) {
  if (loginkey != nullptr) {
    
  } else {
    
  }
  loginkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loginkey);
  // @@protoc_insertion_point(field_set_allocated:yyb.LoginRequest.loginKey)
}

// string idToken = 3;
inline void LoginRequest::clear_idtoken() {
  idtoken_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRequest::idtoken() const {
  // @@protoc_insertion_point(field_get:yyb.LoginRequest.idToken)
  return _internal_idtoken();
}
inline void LoginRequest::set_idtoken(const std::string& value) {
  _internal_set_idtoken(value);
  // @@protoc_insertion_point(field_set:yyb.LoginRequest.idToken)
}
inline std::string* LoginRequest::mutable_idtoken() {
  // @@protoc_insertion_point(field_mutable:yyb.LoginRequest.idToken)
  return _internal_mutable_idtoken();
}
inline const std::string& LoginRequest::_internal_idtoken() const {
  return idtoken_.GetNoArena();
}
inline void LoginRequest::_internal_set_idtoken(const std::string& value) {
  
  idtoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginRequest::set_idtoken(std::string&& value) {
  
  idtoken_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yyb.LoginRequest.idToken)
}
inline void LoginRequest::set_idtoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  idtoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yyb.LoginRequest.idToken)
}
inline void LoginRequest::set_idtoken(const char* value, size_t size) {
  
  idtoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yyb.LoginRequest.idToken)
}
inline std::string* LoginRequest::_internal_mutable_idtoken() {
  
  return idtoken_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRequest::release_idtoken() {
  // @@protoc_insertion_point(field_release:yyb.LoginRequest.idToken)
  
  return idtoken_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_idtoken(std::string* idtoken) {
  if (idtoken != nullptr) {
    
  } else {
    
  }
  idtoken_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), idtoken);
  // @@protoc_insertion_point(field_set_allocated:yyb.LoginRequest.idToken)
}

// string nickName = 4;
inline void LoginRequest::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginRequest::nickname() const {
  // @@protoc_insertion_point(field_get:yyb.LoginRequest.nickName)
  return _internal_nickname();
}
inline void LoginRequest::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:yyb.LoginRequest.nickName)
}
inline std::string* LoginRequest::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:yyb.LoginRequest.nickName)
  return _internal_mutable_nickname();
}
inline const std::string& LoginRequest::_internal_nickname() const {
  return nickname_.GetNoArena();
}
inline void LoginRequest::_internal_set_nickname(const std::string& value) {
  
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginRequest::set_nickname(std::string&& value) {
  
  nickname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yyb.LoginRequest.nickName)
}
inline void LoginRequest::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yyb.LoginRequest.nickName)
}
inline void LoginRequest::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yyb.LoginRequest.nickName)
}
inline std::string* LoginRequest::_internal_mutable_nickname() {
  
  return nickname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginRequest::release_nickname() {
  // @@protoc_insertion_point(field_release:yyb.LoginRequest.nickName)
  
  return nickname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:yyb.LoginRequest.nickName)
}

// -------------------------------------------------------------------

// LoginReply

// .yyb.LoginReply.ERROR_CODE error = 1;
inline void LoginReply::clear_error() {
  error_ = 0;
}
inline ::yyb::LoginReply_ERROR_CODE LoginReply::_internal_error() const {
  return static_cast< ::yyb::LoginReply_ERROR_CODE >(error_);
}
inline ::yyb::LoginReply_ERROR_CODE LoginReply::error() const {
  // @@protoc_insertion_point(field_get:yyb.LoginReply.error)
  return _internal_error();
}
inline void LoginReply::_internal_set_error(::yyb::LoginReply_ERROR_CODE value) {
  
  error_ = value;
}
inline void LoginReply::set_error(::yyb::LoginReply_ERROR_CODE value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:yyb.LoginReply.error)
}

// int32 usn = 2;
inline void LoginReply::clear_usn() {
  usn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginReply::_internal_usn() const {
  return usn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginReply::usn() const {
  // @@protoc_insertion_point(field_get:yyb.LoginReply.usn)
  return _internal_usn();
}
inline void LoginReply::_internal_set_usn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  usn_ = value;
}
inline void LoginReply::set_usn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_usn(value);
  // @@protoc_insertion_point(field_set:yyb.LoginReply.usn)
}

// string loginKey = 3;
inline void LoginReply::clear_loginkey() {
  loginkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginReply::loginkey() const {
  // @@protoc_insertion_point(field_get:yyb.LoginReply.loginKey)
  return _internal_loginkey();
}
inline void LoginReply::set_loginkey(const std::string& value) {
  _internal_set_loginkey(value);
  // @@protoc_insertion_point(field_set:yyb.LoginReply.loginKey)
}
inline std::string* LoginReply::mutable_loginkey() {
  // @@protoc_insertion_point(field_mutable:yyb.LoginReply.loginKey)
  return _internal_mutable_loginkey();
}
inline const std::string& LoginReply::_internal_loginkey() const {
  return loginkey_.GetNoArena();
}
inline void LoginReply::_internal_set_loginkey(const std::string& value) {
  
  loginkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginReply::set_loginkey(std::string&& value) {
  
  loginkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yyb.LoginReply.loginKey)
}
inline void LoginReply::set_loginkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  loginkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yyb.LoginReply.loginKey)
}
inline void LoginReply::set_loginkey(const char* value, size_t size) {
  
  loginkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yyb.LoginReply.loginKey)
}
inline std::string* LoginReply::_internal_mutable_loginkey() {
  
  return loginkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginReply::release_loginkey() {
  // @@protoc_insertion_point(field_release:yyb.LoginReply.loginKey)
  
  return loginkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReply::set_allocated_loginkey(std::string* loginkey) {
  if (loginkey != nullptr) {
    
  } else {
    
  }
  loginkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), loginkey);
  // @@protoc_insertion_point(field_set_allocated:yyb.LoginReply.loginKey)
}

// string nickName = 4;
inline void LoginReply::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginReply::nickname() const {
  // @@protoc_insertion_point(field_get:yyb.LoginReply.nickName)
  return _internal_nickname();
}
inline void LoginReply::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:yyb.LoginReply.nickName)
}
inline std::string* LoginReply::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:yyb.LoginReply.nickName)
  return _internal_mutable_nickname();
}
inline const std::string& LoginReply::_internal_nickname() const {
  return nickname_.GetNoArena();
}
inline void LoginReply::_internal_set_nickname(const std::string& value) {
  
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginReply::set_nickname(std::string&& value) {
  
  nickname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yyb.LoginReply.nickName)
}
inline void LoginReply::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yyb.LoginReply.nickName)
}
inline void LoginReply::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yyb.LoginReply.nickName)
}
inline std::string* LoginReply::_internal_mutable_nickname() {
  
  return nickname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginReply::release_nickname() {
  // @@protoc_insertion_point(field_release:yyb.LoginReply.nickName)
  
  return nickname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReply::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:yyb.LoginReply.nickName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace yyb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::yyb::LoginRequest_LOGIN_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::yyb::LoginRequest_LOGIN_TYPE>() {
  return ::yyb::LoginRequest_LOGIN_TYPE_descriptor();
}
template <> struct is_proto_enum< ::yyb::LoginReply_ERROR_CODE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::yyb::LoginReply_ERROR_CODE>() {
  return ::yyb::LoginReply_ERROR_CODE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpc_5fservice_2eproto
